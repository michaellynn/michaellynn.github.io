<?xml version="1.0" encoding="UTF-8"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>mikeymikey blogs here</title>
    <description>the vent for my mind</description>
    <link>http://michaellynn.github.io/</link>
    <atom:link href="http://michaellynn.github.io/feed.xml" rel="self" type="application/rss+xml" />
    
      <item>
        <title>Booting Secure</title>
        <description>&lt;p&gt;Howdy, y‚Äôall. Long time üòÑ&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=4Qv8CE6D_Rc&quot;&gt;I‚Äôve&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=MjY9chs9c6o&quot;&gt;been&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=uQWH55yIgYU&quot;&gt;somewhat&lt;/a&gt; &lt;a href=&quot;https://www.youtube.com/watch?v=BUClsxF1t3o&quot;&gt;busy&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;So now the 2018 MacBook Pro exists.&lt;/p&gt;

&lt;p&gt;If you didn‚Äôt hear, it ships with Secure Boot. If you did hear, you might be freaking out about that.&lt;/p&gt;

&lt;p&gt;So I‚Äôve written this blog post for you to read. Mind you, I‚Äôm not the only one that‚Äôs written about Secure Boot devices.&lt;/p&gt;

&lt;p&gt;There are community and tech articles:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://twocanoes.com/secureboot-imac-pro/&quot;&gt;SecureBoot &amp;amp; the 2017 iMac Pro&lt;/a&gt; (by the wonderful &lt;a href=&quot;https://twitter.com/tperfitt&quot;&gt;Tim Perfitt&lt;/a&gt; of the excellent &lt;a href=&quot;https://twocanoes.com&quot;&gt;Twocanoes&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://duo.com/blog/apple-imac-pro-and-secure-storage&quot;&gt;Apple iMac Pro and Secure Storage&lt;/a&gt; (by the wizardly &lt;a href=&quot;https://twitter.com/bruienne/&quot;&gt;Pepijn Bruienne&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There are &lt;strong&gt;new&lt;/strong&gt; articles from Apple:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT208330&quot;&gt;About Secure Boot&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT208198&quot;&gt;About Secure Startup Utility&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT208862&quot;&gt;Mac computers that have the Apple T2 chip&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT208344&quot;&gt;About encrypted storage on your new Mac&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT208545&quot;&gt;If your iMac Pro display turns off during startup or updates&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT204463&quot;&gt;If the fans in your Mac run at full speed when you turn it on&lt;/a&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://help.apple.com/configurator/mac/2.6/index.html?localePath=en.lproj#/apdebea5be51&quot;&gt;Apple Configurator 2 Help - Restore iMac Pro&lt;/a&gt; (pay attention to this one ‚Ä¶)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Even older KB articles got updated.&lt;/p&gt;

&lt;p&gt;Some of them are trivia bits:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT204063&quot;&gt;Reset NVRAM or PRAM on your Mac&lt;/a&gt;&lt;br /&gt;&lt;em&gt;On Mac computers that have the Apple T2 chip, you can release the keys after the Apple logo appears and disappears for the second time.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT202768&quot;&gt;About Mac startup tones&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Mac computers that have the Apple T2 chip don‚Äôt have EFI ROM tones.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT201150&quot;&gt;How to turn your Mac on or off&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Additionally, MacBook Pro (2018) turns on when you press any key on the keyboard or press the trackpad.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;But more importantly, some of them may have just completely destroyed your entire macOS imaging / provisioning workflows:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT202770&quot;&gt;Create a NetBoot, NetInstall, or NetRestore image&lt;/a&gt;&lt;br /&gt;&lt;em&gt;Mac computers that have the Apple T2 chip don‚Äôt support starting up from network volumes.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT201255&quot;&gt;Mac startup key combinations&lt;/a&gt;&lt;br /&gt;&lt;em&gt;[N key:] Computers that have the Apple T2 chip don‚Äôt support this startup key.&lt;/em&gt;&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT202796&quot;&gt;How to select a different startup disk&lt;/a&gt;&lt;br /&gt;&lt;em&gt;If you‚Äôre using a Mac that has the Apple T2 chip, check the settings in Startup Security Utility. These settings determine whether your Mac can start up from another disk.&lt;/em&gt;&lt;/li&gt;
&lt;/ul&gt;

&lt;h2 id=&quot;your-new-provisioning-reality&quot;&gt;Your new provisioning reality&lt;/h2&gt;

&lt;p&gt;What do the changes effectively mean to you - the person(s) responsible for Mac setup workflows?&lt;/p&gt;

&lt;p&gt;Secure Boot devices with T2 chips, fresh out of the box:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Are configured at Full Security mode&lt;/li&gt;
  &lt;li&gt;They &lt;strong&gt;do not netinstall / netboot&lt;/strong&gt;. (NetSUS, bsdpy, Server.app‚Äôs NetInstall service - none will work)&lt;/li&gt;
  &lt;li&gt;You can‚Äôt use the N key at startup to boot over the network to an imaging workflow&lt;/li&gt;
  &lt;li&gt;You can‚Äôt use the Option key at startup to select a network boot target&lt;/li&gt;
  &lt;li&gt;They &lt;strong&gt;do not boot from external media&lt;/strong&gt; (USB, Thunderbolt, etc.)&lt;/li&gt;
  &lt;li&gt;You can‚Äôt use the Option key at startup to select a different attached disk to boot from&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Unless your device provisioning/configuration workflow is &lt;a href=&quot;https://www.apple.com/business/docs/DEP_Guide.pdf&quot;&gt;based on the Device Enrollment Program (DEP)&lt;/a&gt;, most of you with ‚Äúlight touch‚Äù automated provisioning workflows will find they‚Äôre now incompatible with T2 devices. (There are a few exceptions, I‚Äôll cover them below.)&lt;/p&gt;

&lt;p&gt;If your workflow is based on bootable attached media (since network boot is really dead dead dead), here‚Äôs what you have to go through to enable this:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Make sure the external boot media you created will even boot the device (the 2018 MacBook Pro runs a custom 10.13.6 fork, for example)&lt;/li&gt;
  &lt;li&gt;Boot the machine normally&lt;/li&gt;
  &lt;li&gt;Complete the Setup Assistant first user creation process, setting a password&lt;/li&gt;
  &lt;li&gt;Reboot into Recovery&lt;/li&gt;
  &lt;li&gt;Open the Secure Startup Utility and allow booting from external media and either
    &lt;ul&gt;
      &lt;li&gt;Set it to No Security, or&lt;/li&gt;
      &lt;li&gt;Leave it at Full / Medium (may require network connectivity to Apple, more on this below)&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;Reboot to the external media&lt;/li&gt;
  &lt;li&gt;&lt;strong&gt;NOW&lt;/strong&gt; you can begin your workflow&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;‚Ä¶ Not exactly ‚Äúlight touch‚Äù anymore, is it?&lt;/p&gt;

&lt;p&gt;But let‚Äôs go over &lt;em&gt;why&lt;/em&gt; this is. Let‚Äôs talk about what Secure Boot requires of your machine.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[ &lt;strong&gt;Note:&lt;/strong&gt; This blog post doesn‚Äôt cover &lt;em&gt;every&lt;/em&gt; aspect of what Secure Boot is checking or doing, but it does cover some new useful technical details. &lt;em&gt;- mike&lt;/em&gt; ]&lt;/small&gt;&lt;/p&gt;

&lt;h2 id=&quot;lets-talk-security-levels&quot;&gt;Let‚Äôs talk security levels&lt;/h2&gt;

&lt;h3 id=&quot;no-security&quot;&gt;No Security&lt;/h3&gt;

&lt;p&gt;I‚Äôm putting this one first because it‚Äôs the easiest to talk about. Simply put, this is closest to the classic boot model we knew before the T2. All the normal stuff applies.&lt;/p&gt;

&lt;p&gt;The device firmware has to be able to see a boot.efi it can use in a volume it can read and boot from and the OS inside the volume has to say it supports the hardware (which is foremost stored in &lt;code class=&quot;highlighter-rouge&quot;&gt;/System/Library/CoreServices/PlatformSupport.plist&lt;/code&gt;, if you‚Äôve ever wondered) and provide all the necessary hardware kexts for talking to the bits of the computer.&lt;/p&gt;

&lt;p&gt;Secure Boot devices come with additional requirements in that the T2 chip runs its own OS (bridgeOS), but yadda yadda yadda this isn‚Äôt the boot mode you‚Äôre interested in reading about. This is your normal ‚Äúif the OS is compatible, it can boot the Mac‚Äù situation.&lt;/p&gt;

&lt;h3 id=&quot;full-security&quot;&gt;Full Security&lt;/h3&gt;

&lt;p&gt;What‚Äôs different about this mode? Let‚Äôs investigage.&lt;/p&gt;

&lt;p&gt;We‚Äôll ask a Secure Boot device what it‚Äôs booting. Let‚Äôs start with the bless command:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;sudo bless --getBoot --verbose&lt;/code&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;EFI found at IODeviceTree:/efi
Current EFI boot device string is: &amp;#39;&amp;lt;array&amp;gt;&amp;lt;dict&amp;gt;&amp;lt;key&amp;gt;IOMatch&amp;lt;/key&amp;gt;&amp;lt;dict&amp;gt;&amp;lt;key&amp;gt;IOProviderClass
&amp;lt;/key&amp;gt;&amp;lt;string&amp;gt;IOMedia&amp;lt;/string&amp;gt;&amp;lt;key&amp;gt;IOPropertyMatch&amp;lt;/key&amp;gt;&amp;lt;dict&amp;gt;&amp;lt;key&amp;gt;UUID&amp;lt;/key&amp;gt;&amp;lt;string&amp;gt;08A2DDE7
-7A58-44F0-ABF6-B721AD7C31AF&amp;lt;/string&amp;gt;&amp;lt;/dict&amp;gt;&amp;lt;/dict&amp;gt;&amp;lt;key&amp;gt;BLLastBSDName&amp;lt;/key&amp;gt;&amp;lt;string&amp;gt;disk1s2&amp;lt;/s
tring&amp;gt;&amp;lt;/dict&amp;gt;&amp;lt;dict&amp;gt;&amp;lt;key&amp;gt;IOEFIDevicePathType&amp;lt;/key&amp;gt;&amp;lt;string&amp;gt;MediaFilePath&amp;lt;/string&amp;gt;&amp;lt;key&amp;gt;Path&amp;lt;/key
&amp;gt;&amp;lt;string&amp;gt;\FD77CA06-84E9-42D0-B5FE-6295D28CBB2F\System\Library\CoreServices\boot.efi&amp;lt;/string&amp;gt;&amp;lt;
/dict&amp;gt;&amp;lt;/array&amp;gt;&amp;#39;
Boot option is 8BE4DF61-93CA-11D2-AA0D-00E098032B8C:Boot0080
Processing boot option &amp;#39;Mac OS X&amp;#39;
Boot option matches XML representation
Found device: disk1s2
Disk boot device detected
Detected APFS volume.  Skipping Boot!=Root check.
No auxiliary booter partition required
System partition found
Preferred system partition found: disk0s1
Returning booter information dictionary:
&amp;lt;CFBasicHash 0x7feb7ac103a0 [0x7fff882dfaf0]&amp;gt;{type = mutable dict, count = 4,
entries =&amp;gt;
	0 : &amp;lt;CFString 0x10c3a73c0 [0x7fff882dfaf0]&amp;gt;{contents = &amp;quot;Data Partitions&amp;quot;} = (
    disk1s2
)
	1 : &amp;lt;CFString 0x10c3a69a0 [0x7fff882dfaf0]&amp;gt;{contents = &amp;quot;Preboot Volumes&amp;quot;} = (
    disk1s2
)
	2 : &amp;lt;CFString 0x10c3a73e0 [0x7fff882dfaf0]&amp;gt;{contents = &amp;quot;Auxiliary Partitions&amp;quot;} = (
)
	3 : &amp;lt;CFString 0x10c3a6be0 [0x7fff882dfaf0]&amp;gt;{contents = &amp;quot;System Partitions&amp;quot;} = (
    disk0s1
)
}

/dev/disk1s2 is a preboot volume
Substituting found system volume /dev/disk1s1
/dev/disk1s1&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/13a2b419416f8fd010a7c8fcda2a9b87.js?file=01_snip.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;There‚Äôs a lot of information there.&lt;/p&gt;

&lt;p&gt;But if you‚Äôve never noticed this before on macOS devices that boot APFS (like all Secure Boot devices), macOS isn‚Äôt booting a file off of the System volume (&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/disk1s1&lt;/code&gt;), it‚Äôs booting the &lt;code class=&quot;highlighter-rouge&quot;&gt;boot.efi&lt;/code&gt; file from the new APFS Preboot volume (&lt;code class=&quot;highlighter-rouge&quot;&gt;/dev/disk1s2&lt;/code&gt;) that you‚Äôll find inside APFS containers:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;BLLastBSDName&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;disk1s2&amp;lt;/string&amp;gt;

&amp;lt;key&amp;gt;Path&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;\FD77CA06-84E9-42D0-B5FE-6295D28CBB2F\System\Library\CoreServices\boot.efi&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It doesn‚Äôt matter if you‚Äôve encrypted the device or not. Every macOS device booting an APFS filesystem boots like this.&lt;/p&gt;

&lt;p&gt;You can see the container layout with this command: &lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil apfs list&lt;/code&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;diskutil apfs list
APFS Container (1 found)
|
+-- Container disk1 7DAB37A1-C5F7-4E6D-AEF5-1F114200BF97
    ====================================================
    APFS Container Reference:     disk1
    Size (Capacity Ceiling):      1000240963584 B (1.0 TB)
    Minimum Size:                 12800237568 B (12.8 GB)
    Capacity In Use By Volumes:   12327649280 B (12.3 GB) (1.2% used)
    Capacity Not Allocated:       987913314304 B (987.9 GB) (98.8% free)
    |
    +-&amp;lt; Physical Store disk0s2 33B53866-762C-468B-B270-53CD9B1A1D18
    |   -----------------------------------------------------------
    |   APFS Physical Store Disk:   disk0s2
    |   Size:                       1000240963584 B (1.0 TB)
    |
    +-&amp;gt; Volume disk1s1 FD77CA06-84E9-42D0-B5FE-6295D28CBB2F
    |   ---------------------------------------------------
    |   APFS Volume Disk (Role):   disk1s1 (No specific role)
    |   Name:                      Macintosh HD (Case-insensitive)
    |   Mount Point:               /
    |   Capacity Consumed:         11026714624 B (11.0 GB)
    |   FileVault:                 No (Encrypted at rest)
    |
    +-&amp;gt; Volume disk1s2 08A2DDE7-7A58-44F0-ABF6-B721AD7C31AF
    |   ---------------------------------------------------
    |   APFS Volume Disk (Role):   disk1s2 (Preboot)
    |   Name:                      Preboot (Case-insensitive)
    |   Mount Point:               /Volumes/Preboot
    |   Capacity Consumed:         48771072 B (48.8 MB)
    |   FileVault:                 No
    |
    +-&amp;gt; Volume disk1s3 AF2A7289-1CFE-4058-9048-FC89FE45B66F
    |   ---------------------------------------------------
    |   APFS Volume Disk (Role):   disk1s3 (Recovery)
    |   Name:                      Recovery (Case-insensitive)
    |   Mount Point:               Not Mounted
    |   Capacity Consumed:         1044361216 B (1.0 GB)
    |   FileVault:                 No
    |
    +-&amp;gt; Volume disk1s4 76B04202-3499-4845-B685-64DA25B0CC82
        ---------------------------------------------------
        APFS Volume Disk (Role):   disk1s4 (VM)
        Name:                      VM (Case-insensitive)
        Mount Point:               /private/var/vm
        Capacity Consumed:         20480 B (20.5 KB)
        FileVault:                 No (Encrypted at rest)&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/13a2b419416f8fd010a7c8fcda2a9b87.js?file=02_snip.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;It comes in a triplet: OS/System volume, Preboot, and Recovery. If you‚Äôre booted from a System volume within an APFS Container, you‚Äôll also see a (temporary) VM volume, which has taken the place of and is mounted at &lt;code class=&quot;highlighter-rouge&quot;&gt;/private/var/vm&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;So we‚Äôre booting from Preboot.&lt;/p&gt;

&lt;p&gt;Since we‚Äôre trying to figure out what‚Äôs different about a Secure Boot device, does the Preboot volume of an older Mac without a T2 chip look different in comparison?&lt;/p&gt;

&lt;p&gt;Let‚Äôs mount them and see. For the running OS off the internal disk, that‚Äôs usually:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil mount /dev/disk1s2&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;It should mount at &lt;code class=&quot;highlighter-rouge&quot;&gt;/Volumes/Preboot&lt;/code&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;diskutil mount /dev/disk1s2
Volume Preboot on /dev/disk1s2 mounted

ls -l /Volumes/Preboot/
total 0
drwxr-xr-x  7 root  wheel  224 Jul 17 09:38 FD77CA06-84E9-42D0-B5FE-6295D28CBB2F&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/13a2b419416f8fd010a7c8fcda2a9b87.js?file=03_snip.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;If you look at the top level of the disk, you‚Äôll see one (or more) folders that look like long hex strings with dashes in them. Those are &lt;a href=&quot;https://en.wikipedia.org/wiki/Universally_unique_identifier&quot;&gt;GUIDs&lt;/a&gt;. Not only are they GUIDs, but the GUIDs match some of the output that we saw before in &lt;code class=&quot;highlighter-rouge&quot;&gt;diskutil apfs list&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;A System volume within an APFS Container has its own unique GUID. Within Preboot (and the Recovery volume as well), the top level folders will contain a folder with a name matching the GUID of the System volume it‚Äôs paired with.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;    +-&amp;gt; Volume disk1s1 FD77CA06-84E9-42D0-B5FE-6295D28CBB2F
    |   ---------------------------------------------------
    |   APFS Volume Disk (Role):   disk1s1 (No specific role)
    |   Name:                      Macintosh HD (Case-insensitive)
    |   Mount Point:               /
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;ls -l /Volumes/Preboot/
total 0
drwxr-xr-x  7 root  wheel  224 Jul 17 09:38 FD77CA06-84E9-42D0-B5FE-6295D28CBB2F
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;In the HFS+ boot model, the kernel is hardcoded to look for the Recovery partition at the partition id minus 1 of the associated System partition. With APFS, a single APFS container can now contain multiple System volumes - &lt;strong&gt;but only a single Recovery/Partition volume is required within the container&lt;/strong&gt;, each of which can contain multiple GUID-named folders (one for each System volume).&lt;/p&gt;

&lt;p&gt;Looking back at the information we got from the bless command, we can see that the boot.efi is in a subfolder within the GUID folder: &lt;code class=&quot;highlighter-rouge&quot;&gt;System/Library/CoreServices/boot.efi&lt;/code&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;lt;key&amp;gt;Path&amp;lt;/key&amp;gt;
&amp;lt;string&amp;gt;\FD77CA06-84E9-42D0-B5FE-6295D28CBB2F\System\Library\CoreServices\boot.efi&amp;lt;/string&amp;gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So, if this is the boot target of the Secure Boot device, maybe there‚Äôs something in here related to the Secure Boot process.&lt;/p&gt;

&lt;p&gt;There‚Äôs quite a few files in the Preboot volume.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;find /Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F

/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/appleLogo.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/flag_picker.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/unknown_userUI.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/sound.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/battery.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/recoveryUI.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/Lucida13.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/disk_passwordUI.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/recovery_user.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/Lucida13White.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/loginui.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/usr/standalone/i386/EfiLoginUI/guest_userUI.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/var
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/var/db
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/var/db/AdminUserRecoveryInfo.plist
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/var/db/CryptoUserInfo.plist
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/var/db/secureaccesstoken.plist
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/Library
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/Library/Preferences
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/Library/Preferences/SystemConfiguration
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/Library/Preferences/SystemConfiguration/com.apple.Boot.plist
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/.disk_label_2x
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/boot.efi
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/.root_uuid
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/boot.efi.j137ap.im4m
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/.disk_label
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/bootbase.efi.j137ap.im4m
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/BridgeVersion.bin
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/PlatformSupport.plist
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/.contentDetails
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/SystemVersion.plist
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/CoreServices/boot.efi.j137ap.15156C1879A0A6.im4m
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EncryptedRoot.plist.wipekey
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/appleLogo.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/flag_picker.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/unknown_userUI.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/sound.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/battery.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/Lucida13.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/disk_passwordUI.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/Lucida13White.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/loginui.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/guest_userUI.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/System/Library/Caches/com.apple.corestorage/EFILoginLocalizations/preferences.efires
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/com.apple.Boot.plist
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/bootbase.efi.j137ap.15156C1879A0A6.im4m
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/.disk_label_2x
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/boot.efi
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/boot.efi.j137ap.im4m
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/BridgeVersion.plist
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/immutablekernel.j137ap.15156C1879A0A6.im4m
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/.disk_label.contentDetails
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/.disk_label
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/bootbase.efi.j137ap.im4m
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/BridgeVersion.bin
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/PlatformSupport.plist
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/SystemVersion.plist
/Volumes/Preboot/FD77CA06-84E9-42D0-B5FE-6295D28CBB2F/com.apple.installer/boot.efi.j137ap.15156C1879A0A6.im4m&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/13a2b419416f8fd010a7c8fcda2a9b87.js?file=04_snip.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;Maybe we could compare them to a device running the same OS version without a T2 chip. For the record here, that means I‚Äôm comparing an iMac Pro to a 2017 MacBook Pro running 10.13.6.&lt;/p&gt;

&lt;p&gt;Let‚Äôs chop out the GUID names at the beginning (since they‚Äôre unique to every System volume) and just compare the contents of the subdirectories. Sort the lines of each and run both of them against each other through the &lt;code class=&quot;highlighter-rouge&quot;&gt;diff&lt;/code&gt; command:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;*** Standard-listing.txt
--- SecureBoot-listing.txt
***************
*** 4,12 ****
--- 4,15 ----
  com.apple.installer/.disk_label_2x
  com.apple.installer/boot.efi
+ com.apple.installer/boot.efi.j137ap.15156C1879A0A6.im4m
  com.apple.installer/boot.efi.j137ap.im4m
+ com.apple.installer/bootbase.efi.j137ap.15156C1879A0A6.im4m
  com.apple.installer/bootbase.efi.j137ap.im4m
  com.apple.installer/BridgeVersion.bin
  com.apple.installer/BridgeVersion.plist
  com.apple.installer/com.apple.Boot.plist
+ com.apple.installer/immutablekernel.j137ap.15156C1879A0A6.im4m
  com.apple.installer/PlatformSupport.plist
  com.apple.installer/SystemVersion.plist
***************
*** 38,41 ****
--- 41,45 ----
  System/Library/CoreServices/.root_uuid
  System/Library/CoreServices/boot.efi
+ System/Library/CoreServices/boot.efi.j137ap.15156C1879A0A6.im4m
  System/Library/CoreServices/boot.efi.j137ap.im4m
  System/Library/CoreServices/bootbase.efi.j137ap.im4m
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Wow. The only different files are on the Secure Boot device.&lt;/p&gt;

&lt;p&gt;im4m files - what are those?&lt;/p&gt;

&lt;p&gt;Google has some interesting hits: &lt;a href=&quot;https://www.theiphonewiki.com/wiki/IMG4_File_Format&quot;&gt;IMG4 File Format&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;A ‚Äúmanifest‚Äù file. A structured tag file that contains signatures for OS components. Used on some of Apple‚Äôs other OSes, including iOS.&lt;/p&gt;

&lt;p&gt;Let‚Äôs go back to Apple‚Äôs description of what Full Security does:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;During startup, your Mac verifies the integrity of the operating system (OS) on your startup disk to make sure that it‚Äôs legitimate.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;That sounds like something signatures would be useful for.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;This information is unique to your Mac, and it ensures that your Mac starts up from an OS that is trusted by Apple.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Oh? So this might be different if we look at yet another iMac Pro? Good thing I access to a few to compare üòÑ&lt;/p&gt;

&lt;p&gt;And sure enough, there are the same additional files on the other device, but the hex string before the .im4m suffix (the &lt;strong&gt;15156C1879A0A6&lt;/strong&gt; in &lt;code class=&quot;highlighter-rouge&quot;&gt;boot.efi.j137ap.15156C1879A0A6.im4m&lt;/code&gt;) is different.&lt;/p&gt;

&lt;p&gt;Well.&lt;/p&gt;

&lt;p&gt;If we think this is part of the security signature, let‚Äôs start with some basic experimentation and just rename (just in case we need it again ‚Ä¶) these files.&lt;/p&gt;

&lt;p&gt;&lt;small&gt;[ &lt;strong&gt;Note:&lt;/strong&gt; I had to do it from Target Disk mode! Some fun filesystem protections here (if you want to play at home) &lt;em&gt;- mike&lt;/em&gt; ]&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;For extra grins, let‚Äôs poke at this comment make sure the network is disconnected before reboot:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;If your Mac can‚Äôt connect to the Internet, it displays an alert that an Internet connection is required.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Annnnnnd ‚Ä¶‚Ä¶. ?&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2018-07-27-booting-secure/error.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;BINGO. It would seem we have part of the equation.&lt;/p&gt;

&lt;p&gt;Reconnecting the device to the network and then later checking in Preboot, it would seem new &lt;code class=&quot;highlighter-rouge&quot;&gt;*.j137ap.15156C1879A0A6.im4m&lt;/code&gt; files have been recreated.&lt;/p&gt;

&lt;p&gt;Interstingly, each one rebuilds a uniquely named file - but always with the same hex name for itself.&lt;/p&gt;

&lt;p&gt;They appear to be different every time they‚Äôre remade because the checksums keep changing. So they‚Äôre not static records but instead are likely dynamic signatures, needing that network access in order to be created.&lt;/p&gt;

&lt;p&gt;So maybe the static hex string is a unique identifier of sorts.&lt;/p&gt;

&lt;p&gt;We should try searching the machine for the identifier - maybe we can find out what it is.&lt;/p&gt;

&lt;p&gt;Normally for this kind of thing, if I want to search through the entire contents of the machine I‚Äôd reach out to my standard tools like &lt;a href=&quot;https://geoff.greer.fm/ag/&quot;&gt;the Silver Searcher&lt;/a&gt; or &lt;a href=&quot;https://blog.burntsushi.net/ripgrep/&quot;&gt;RipGrep&lt;/a&gt;. Both of these tools will gladly recursively search through both text and binary files to locate strings you‚Äôre interested in. These guys get frequent shoutouts in my reverse engineering talks.&lt;/p&gt;

&lt;p&gt;However, in this case, I dumbly lucked out by trying the naive approach and checking to see if the output of &lt;code class=&quot;highlighter-rouge&quot;&gt;system_profiler&lt;/code&gt; (which lists other unique identifiers like ethernet MAC addresses, serial numbers, etc.) happened to contain the hex string in question.&lt;/p&gt;

&lt;p&gt;It did!&lt;/p&gt;

&lt;p&gt;But &lt;strong&gt;only because I‚Äôd freshly re-installed the OS&lt;/strong&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;system_profiler&lt;/code&gt; tends to include recent portions of several log files. In this instance, it included &lt;code class=&quot;highlighter-rouge&quot;&gt;install.log&lt;/code&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;osinstallersetupd[598]: tss_submit_job: ----Begin request
osinstallersetupd[598]: tss_submit_job: &amp;lt;CFBasicHash 0x7fe8e067bd30 [0x106a7daf0]&amp;gt;{type = mutable dict, count = 16,
	entries =&amp;gt;
		0 : &amp;lt;CFString 0x117cbe9b0 [0x106a7daf0]&amp;gt;{contents = &amp;quot;x86,SecurityMode&amp;quot;} = &amp;lt;CFBoolean 0x106a7e3e8 [0x106a7daf0]&amp;gt;{value = true}
		1 : &amp;lt;CFString 0x117cbf830 [0x106a7daf0]&amp;gt;{contents = &amp;quot;@HostPlatformInfo&amp;quot;} = &amp;lt;CFString 0x117cbf950 [0x106a7daf0]&amp;gt;{contents = &amp;quot;mac&amp;quot;}
		2 : &amp;lt;CFString 0x117cbe990 [0x106a7daf0]&amp;gt;{contents = &amp;quot;x86,ProductionMode&amp;quot;} = &amp;lt;CFBoolean 0x106a7e3e8 [0x106a7daf0]&amp;gt;{value = true}
		3 : &amp;lt;CFString 0x117cb96f0 [0x106a7daf0]&amp;gt;{contents = &amp;quot;ApECID&amp;quot;} = &amp;lt;CFNumber 0x15156c1879a0a637 [0x106a7daf0]&amp;gt;{value = +5934528522199206, type = kCFNumberSInt64Type}
		4 : &amp;lt;CFString 0x117cb96b0 [0x106a7daf0]&amp;gt;{contents = &amp;quot;ApBoardID&amp;quot;} = &amp;lt;CFNumber 0xa27 [0x106a7daf0]&amp;gt;{value = +10, type = kCFNumberSInt32Type}
		5 : &amp;lt;CFString 0x117cbf850 [0x106a7daf0]&amp;gt;{contents = &amp;quot;@VersionInfo&amp;quot;} = &amp;lt;CFString 0x117cbf970 [0x106a7daf0]&amp;gt;{contents = &amp;quot;libauthinstall-521.50.21&amp;quot;}
		6 : &amp;lt;CFString 0x117cbff30 [0x106a7daf0]&amp;gt;{contents = &amp;quot;UniqueBuildID&amp;quot;} = &amp;lt;CFData 0x7fe8e0671fc0 [0x106a7daf0]&amp;gt;{length = 20, capacity = 64, bytes = 0x9be59ef7512563c1f8623b8d3bafa5ae37ee748b}
		9 : &amp;lt;CFString 0x7fe8e066f700 [0x106a7daf0]&amp;gt;{contents = &amp;quot;x86,x86MultiUpdater&amp;quot;} = &amp;lt;CFBasicHash 0x7fe8e06758b0 [0x106a7daf0]&amp;gt;{type = mutable dict, count = 4,
	entries =&amp;gt;
		0 : Digest = &amp;lt;CFData 0x7fe8e065a090 [0x106a7daf0]&amp;gt;{length = 48, capacity = 64, bytes = 0x2ca99430f622e4f7f57bd59a48dd8581 ... 2c5347f947cd9bab}
		1 : ESEC = &amp;lt;CFBoolean 0x106a7e3e8 [0x106a7daf0]&amp;gt;{value = true}
		5 : EPRO = &amp;lt;CFBoolean 0x106a7e3e8 [0x106a7daf0]&amp;gt;{value = true}
		6 : Trusted = &amp;lt;CFBoolean 0x106a7e3f8 [0x106a7daf0]&amp;gt;{value = false}
	}&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/13a2b419416f8fd010a7c8fcda2a9b87.js?file=05_snip.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;ApECID? There‚Äôs also an ApBoardID. So maybe that‚Äôs just EC? Or ECID?&lt;/p&gt;

&lt;p&gt;Let‚Äôs try our good friends at the iPhone Wiki again, maybe they know.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.theiphonewiki.com/wiki/ECID&quot;&gt;ECID&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;The ECID (possibly standing for Exclusive Chip ID or Electronic Chip ID) is an identifier unique to every unit.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;There‚Äôs a ton of detail on that page. It‚Äôs most likely lots of educated guesses from non-Apple people. Likely not all of it applies to Secure Boot Macs. But if you play around with some of the tools and suggestions they have, you‚Äôll find out that we‚Äôre looking at basically the same thing.&lt;/p&gt;

&lt;h2 id=&quot;growing-evidence-of-the-new-process&quot;&gt;Growing evidence of the new process&lt;/h2&gt;

&lt;p&gt;So Secure Boot Macs have a new unique identifier which iOS devices have had for some time: the ECID.&lt;/p&gt;

&lt;p&gt;And it would appear that a signature manifest is generated as part of the Secure Boot process that, in Full Mode, makes a signature specific to the ECID of the device itself.&lt;/p&gt;

&lt;p&gt;‚Ä¶ are there any other good tidbits in the log near there?&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;iMac-Pro osinstallersetupd[598]: ---- Checking for network reachability ----
iMac-Pro osinstallersetupd[598]: Signing server is reachable: http://gs.apple.com:80
iMac-Pro osinstallersetupd[598]: ---- Starting personalization ----
iMac-Pro osinstallersetupd[598]: Starting personalization with libauthinstall-521.50.21
iMac-Pro osinstallersetupd[598]: Configuring amai
iMac-Pro osinstallersetupd[598]: preferBuildManifest is set, will use measurements from build manifest
iMac-Pro osinstallersetupd[598]: AMAuthInstallBundleCopyBuildIdentityForVariant: No baseband chipid reported. Will match Build Identity based on ap chipid and boardid only.
iMac-Pro osinstallersetupd[598]: Personalizing to /var/tmp/OSPersonalizationTemp/A308C220-90B4-4DC3-927D-39A4919027FB-PersonalizedBundle
...
iMac-Pro osinstallersetupd[598]: tss_submit_job_with_retry: TSS Connection attempt 1 of 3.  (Will retry if TSS_ERR_SERVER_NOT_REACHABLE.)
iMac-Pro osinstallersetupd[598]: AMAuthInstallHttpMessageSendSync: httpRequest=&amp;lt;CFHTTPMessageRef 0x7fe8e067fa40(0x7fe8e067fa50)&amp;gt; { POST request, url http://gs.apple.com:80/TSS/controller?action=2 }&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/13a2b419416f8fd010a7c8fcda2a9b87.js?file=06_snip.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;strong&gt;WHOA!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;So we now know this entire new process is called ‚Äúpersonalization‚Äù AND we know the URL that it‚Äôs reaching out to: http://gs.apple.com:80/TSS/controller?action=2&lt;/p&gt;

&lt;p&gt;Any more friendly hits on the wiki for that site or URL?&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://www.theiphonewiki.com/wiki/SHSH_Protocol&quot;&gt;SHSH Protocol&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Wow, the ‚ÄúSending data (request)‚Äù section there looks &lt;em&gt;very&lt;/em&gt; similar to the details the Mac is sending: &lt;code class=&quot;highlighter-rouge&quot;&gt;@HostPlatformInfo&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;ApECID&lt;/code&gt;, etc.&lt;/p&gt;

&lt;p&gt;This is locking it in pretty solid that Apple has leveraged this same technology for generating signatures for validated booting for Secure Boot on Mac.&lt;/p&gt;

&lt;p&gt;Knowing what we know now, we can play a little bit more to help confirm these files are unique to the devices they‚Äôre generated for.&lt;/p&gt;

&lt;p&gt;Copying them between Secure Boot devices and renaming them to match the ECID of the other device still results in Secure Boot wanting to repair the signature.&lt;/p&gt;

&lt;p&gt;Going back to the 2017 MacBook Pro that does not have Secure Boot, it doesn‚Äôt have a uniquely named .im4m file - but it does have a ‚Äúgeneric‚Äù .im4m file for the boot.efi: &lt;code class=&quot;highlighter-rouge&quot;&gt;boot.efi.j137ap.im4m&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;What happens if we delete it?&lt;/p&gt;

&lt;p&gt;‚Ä¶ Still boots.&lt;/p&gt;

&lt;p&gt;So apparently devices that are not Secure Boot don‚Äôt rely on (or check/validate) the .im4m files during the boot process at all.&lt;/p&gt;

&lt;p&gt;Let‚Äôs take one last bit from the logs helps to confirm that these signatures are indeed the .im4m files:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;iMac-Pro osinstallersetupd[598]: Copying AP ticket to /var/tmp/OSPersonalizationTemp/D1A04BCF-0305-4156-B576-156333850AA9-SignedManifestsSandbox/System/Library/PrelinkedKernels/immutablekernel.j137ap.15156C1879A0A6.im4m
iMac-Pro osinstallersetupd[598]: Copying AP ticket to /var/tmp/OSPersonalizationTemp/D1A04BCF-0305-4156-B576-156333850AA9-SignedManifestsSandbox/usr/standalone/firmware/FUD/MultiUpdater/MultiUpdater.efi.j137ap.15156C1879A0A6.im4m
iMac-Pro osinstallersetupd[598]: Copying AP ticket to /var/tmp/OSPersonalizationTemp/D1A04BCF-0305-4156-B576-156333850AA9-SignedManifestsSandbox/usr/standalone/i386/boot.efi.j137ap.15156C1879A0A6.im4m
iMac-Pro osinstallersetupd[598]: Copying AP ticket to /var/tmp/OSPersonalizationTemp/D1A04BCF-0305-4156-B576-156333850AA9-SignedManifestsSandbox/System/Library/AccessoryUpdaterBundles/USBCAccessoryFirmwareUpdater.bundle/Contents/Resources/HPMUtil.efi.j137ap.15156C1879A0A6.im4m
iMac-Pro osinstallersetupd[598]: Copying AP ticket to /var/tmp/OSPersonalizationTemp/D1A04BCF-0305-4156-B576-156333850AA9-SignedManifestsSandbox/System/Library/CoreServices/boot.efi.j137ap.15156C1879A0A6.im4m&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/13a2b419416f8fd010a7c8fcda2a9b87.js?file=07_snip.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;Pretty clear proof that the result of the personalization process is saved to these .im4m file paths.&lt;/p&gt;

&lt;p&gt;But what about ..&lt;/p&gt;

&lt;h3 id=&quot;medium-security&quot;&gt;Medium Security&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Allows any version of signed operating system software ever trusted by Apple to run.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p /&gt;

&lt;blockquote&gt;
  &lt;p&gt;During startup when Medium Security is turned on, your Mac verifies the OS on your startup disk only by making sure that it has been properly signed by Apple [‚Ä¶]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;No mention of ‚ÄúThis information is unique to your Mac‚Äù.&lt;/p&gt;

&lt;p&gt;So let‚Äôs:&lt;/p&gt;

&lt;ol&gt;
  &lt;li&gt;Set it to Medium&lt;/li&gt;
  &lt;li&gt;Delete those uniquely named .im4m files again, then&lt;/li&gt;
  &lt;li&gt;Reboot!&lt;/li&gt;
&lt;/ol&gt;

&lt;p&gt;‚Ä¶ &lt;em&gt;Hmmmmmmm&lt;/em&gt;, it booted.&lt;/p&gt;

&lt;p&gt;Now my directory structure is an &lt;em&gt;exact match&lt;/em&gt; for the 2017 MacBook Pro. I no longer have .im4m files with the ECID hex identifier.&lt;/p&gt;

&lt;p&gt;But what about these other .im4m files that are in there (the ones without the ECID names in them)?&lt;/p&gt;

&lt;p&gt;Maybe that‚Äôs what we‚Äôre relying on now?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Deleting .im4m files - ROUND 2!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;And as soon as you do that, yes, you run into alert dialogs that the OS is no longer trusted or bootable and needs repair.&lt;/p&gt;

&lt;p&gt;Let‚Äôs expand the thought process again.&lt;/p&gt;

&lt;p&gt;Because there was no statement that ‚ÄúThis information is unique to your Mac‚Äù ‚Ä¶ &lt;strong&gt;could we copy them&lt;/strong&gt; from the 2017 MacBook Pro (which doesn‚Äôt have Secure Boot) back to the iMac Pro (which does have Secure Boot) and get the iMac Pro booting again?&lt;/p&gt;

&lt;p&gt;Answer: &lt;strong&gt;YES&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Repeating the experiment but this time copying .im4m files from a machine running 10.13.5, &lt;strong&gt;we get blocked at boot again&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;So we now know the ‚Äúgeneric‚Äù .im4m files are &lt;em&gt;OS specific&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Knowing what we‚Äôve found so far, let‚Äôs loop back and look at these .im4m files again and the wiki page we found mentioning them. There‚Äôs some interesting notes at the bottom mentioning ASN.1.&lt;/p&gt;

&lt;p&gt;Are .im4m files just simply ASN.1 encoded?&lt;/p&gt;

&lt;p&gt;Let‚Äôs run them against &lt;code class=&quot;highlighter-rouge&quot;&gt;openssl asn1parse&lt;/code&gt; and find out:&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;boot.efi.j137ap.15156C1879A0A6.im4m:&lt;/strong&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;openssl asn1parse -inform DER -in boot.efi.j137ap.15156C1879A0A6.im4m

    0:d=0  hl=4 l=3040 cons: SEQUENCE          
    4:d=1  hl=2 l=   4 prim: IA5STRING         :IM4M
   10:d=1  hl=2 l=   1 prim: INTEGER           :00
   13:d=1  hl=4 l= 811 cons: SET               
   17:d=2  hl=9 l= 802 cons: priv [ 1296125506 ] 
   26:d=3  hl=4 l= 798 cons: SEQUENCE          
   30:d=4  hl=2 l=   4 prim: IA5STRING         :MANB
   36:d=4  hl=4 l= 788 cons: SET               
   40:d=5  hl=8 l= 232 cons: priv [ 1296125520 ] 
   48:d=6  hl=3 l= 229 cons: SEQUENCE          
   51:d=7  hl=2 l=   4 prim: IA5STRING         :MANP
   57:d=7  hl=3 l= 220 cons: SET               
   60:d=8  hl=7 l=  11 cons: priv [ 1112494660 ] 
   67:d=9  hl=2 l=   9 cons: SEQUENCE          
   69:d=10 hl=2 l=   4 prim: IA5STRING         :BORD
   75:d=10 hl=2 l=   1 prim: INTEGER           :0A
   78:d=8  hl=7 l=  11 cons: priv [ 1128616015 ] 
   85:d=9  hl=2 l=   9 cons: SEQUENCE          
   87:d=10 hl=2 l=   4 prim: IA5STRING         :CEPO
   93:d=10 hl=2 l=   1 prim: INTEGER           :02
   96:d=8  hl=7 l=  13 cons: priv [ 1128810832 ] 
  103:d=9  hl=2 l=  11 cons: SEQUENCE          
  105:d=10 hl=2 l=   4 prim: IA5STRING         :CHIP
  111:d=10 hl=2 l=   3 prim: INTEGER           :8012
  116:d=8  hl=7 l=  17 cons: priv [ 1162037572 ] 
  123:d=9  hl=2 l=  15 cons: SEQUENCE          
  125:d=10 hl=2 l=   4 prim: IA5STRING         :ECID
  131:d=10 hl=2 l=   7 prim: INTEGER           :15156C1879A0A6
  140:d=8  hl=7 l=  11 cons: priv [ 1396985677 ] 
  147:d=9  hl=2 l=   9 cons: SEQUENCE          
  149:d=10 hl=2 l=   4 prim: IA5STRING         :SDOM
  155:d=10 hl=2 l=   1 prim: INTEGER           :01
  158:d=8  hl=7 l=  11 cons: priv [ 1836085871 ] 
  165:d=9  hl=2 l=   9 cons: SEQUENCE          
  167:d=10 hl=2 l=   4 prim: IA5STRING         :mpro
  173:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  176:d=8  hl=7 l=  11 cons: priv [ 1836279139 ] 
  183:d=9  hl=2 l=   9 cons: SEQUENCE          
  185:d=10 hl=2 l=   4 prim: IA5STRING         :msec
  191:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  194:d=8  hl=7 l=  30 cons: priv [ 1936881262 ] 
  201:d=9  hl=2 l=  28 cons: SEQUENCE          
  203:d=10 hl=2 l=   4 prim: IA5STRING         :srvn
  209:d=10 hl=2 l=  20 prim: OCTET STRING      [HEX DUMP]:33...
  231:d=8  hl=7 l=  42 cons: priv [ 2020503406 ] 
  238:d=9  hl=2 l=  40 cons: SEQUENCE          
  240:d=10 hl=2 l=   4 prim: IA5STRING         :xnon
  246:d=10 hl=2 l=  32 prim: OCTET STRING      [HEX DUMP]:C7...
  280:d=5  hl=8 l= 129 cons: priv [ 1701210466 ] 
  288:d=6  hl=2 l= 127 cons: SEQUENCE          
  290:d=7  hl=2 l=   4 prim: IA5STRING         :efib
  296:d=7  hl=2 l= 119 cons: SET               
  298:d=8  hl=7 l=  58 cons: priv [ 1145525076 ] 
  305:d=9  hl=2 l=  56 cons: SEQUENCE          
  307:d=10 hl=2 l=   4 prim: IA5STRING         :DGST
  313:d=10 hl=2 l=  48 prim: OCTET STRING      [HEX DUMP]:82...
  363:d=8  hl=7 l=  11 cons: priv [ 1162560857 ] 
  370:d=9  hl=2 l=   9 cons: SEQUENCE          
  372:d=10 hl=2 l=   4 prim: IA5STRING         :EKEY
  378:d=10 hl=2 l=   1 prim: BOOLEAN           :0
  381:d=8  hl=7 l=  11 cons: priv [ 1162891855 ] 
  388:d=9  hl=2 l=   9 cons: SEQUENCE          
  390:d=10 hl=2 l=   4 prim: IA5STRING         :EPRO
  396:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  399:d=8  hl=7 l=  11 cons: priv [ 1163085123 ] 
  406:d=9  hl=2 l=   9 cons: SEQUENCE          
  408:d=10 hl=2 l=   4 prim: IA5STRING         :ESEC
  414:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  417:d=5  hl=8 l= 129 cons: priv [ 1752198517 ] 
  425:d=6  hl=2 l= 127 cons: SEQUENCE          
  427:d=7  hl=2 l=   4 prim: IA5STRING         :hpmu
  433:d=7  hl=2 l= 119 cons: SET               
  435:d=8  hl=7 l=  58 cons: priv [ 1145525076 ] 
  442:d=9  hl=2 l=  56 cons: SEQUENCE          
  444:d=10 hl=2 l=   4 prim: IA5STRING         :DGST
  450:d=10 hl=2 l=  48 prim: OCTET STRING      [HEX DUMP]:C9...
  500:d=8  hl=7 l=  11 cons: priv [ 1162560857 ] 
  507:d=9  hl=2 l=   9 cons: SEQUENCE          
  509:d=10 hl=2 l=   4 prim: IA5STRING         :EKEY
  515:d=10 hl=2 l=   1 prim: BOOLEAN           :0
  518:d=8  hl=7 l=  11 cons: priv [ 1162891855 ] 
  525:d=9  hl=2 l=   9 cons: SEQUENCE          
  527:d=10 hl=2 l=   4 prim: IA5STRING         :EPRO
  533:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  536:d=8  hl=7 l=  11 cons: priv [ 1163085123 ] 
  543:d=9  hl=2 l=   9 cons: SEQUENCE          
  545:d=10 hl=2 l=   4 prim: IA5STRING         :ESEC
  551:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  554:d=5  hl=8 l= 129 cons: priv [ 1835758190 ] 
  562:d=6  hl=2 l= 127 cons: SEQUENCE          
  564:d=7  hl=2 l=   4 prim: IA5STRING         :mkrn
  570:d=7  hl=2 l= 119 cons: SET               
  572:d=8  hl=7 l=  58 cons: priv [ 1145525076 ] 
  579:d=9  hl=2 l=  56 cons: SEQUENCE          
  581:d=10 hl=2 l=   4 prim: IA5STRING         :DGST
  587:d=10 hl=2 l=  48 prim: OCTET STRING      [HEX DUMP]:EF...
  637:d=8  hl=7 l=  11 cons: priv [ 1162560857 ] 
  644:d=9  hl=2 l=   9 cons: SEQUENCE          
  646:d=10 hl=2 l=   4 prim: IA5STRING         :EKEY
  652:d=10 hl=2 l=   1 prim: BOOLEAN           :0
  655:d=8  hl=7 l=  11 cons: priv [ 1162891855 ] 
  662:d=9  hl=2 l=   9 cons: SEQUENCE          
  664:d=10 hl=2 l=   4 prim: IA5STRING         :EPRO
  670:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  673:d=8  hl=7 l=  11 cons: priv [ 1163085123 ] 
  680:d=9  hl=2 l=   9 cons: SEQUENCE          
  682:d=10 hl=2 l=   4 prim: IA5STRING         :ESEC
  688:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  691:d=5  hl=8 l= 129 cons: priv [ 1836413028 ] 
  699:d=6  hl=2 l= 127 cons: SEQUENCE          
  701:d=7  hl=2 l=   4 prim: IA5STRING         :mupd
  707:d=7  hl=2 l= 119 cons: SET               
  709:d=8  hl=7 l=  58 cons: priv [ 1145525076 ] 
  716:d=9  hl=2 l=  56 cons: SEQUENCE          
  718:d=10 hl=2 l=   4 prim: IA5STRING         :DGST
  724:d=10 hl=2 l=  48 prim: OCTET STRING      [HEX DUMP]:2C...
  774:d=8  hl=7 l=  11 cons: priv [ 1162560857 ] 
  781:d=9  hl=2 l=   9 cons: SEQUENCE          
  783:d=10 hl=2 l=   4 prim: IA5STRING         :EKEY
  789:d=10 hl=2 l=   1 prim: BOOLEAN           :0
  792:d=8  hl=7 l=  11 cons: priv [ 1162891855 ] 
  799:d=9  hl=2 l=   9 cons: SEQUENCE          
  801:d=10 hl=2 l=   4 prim: IA5STRING         :EPRO
  807:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  810:d=8  hl=7 l=  11 cons: priv [ 1163085123 ] 
  817:d=9  hl=2 l=   9 cons: SEQUENCE          
  819:d=10 hl=2 l=   4 prim: IA5STRING         :ESEC
  825:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  828:d=1  hl=4 l= 512 prim: OCTET STRING      [HEX DUMP]:38...
 1344:d=1  hl=4 l=1696 cons: SEQUENCE          
 1348:d=2  hl=4 l=1692 cons: SEQUENCE          
 1352:d=3  hl=4 l=1156 cons: SEQUENCE          
 1356:d=4  hl=2 l=   3 cons: cont [ 0 ]        
 1358:d=5  hl=2 l=   1 prim: INTEGER           :02
 1361:d=4  hl=2 l=   8 prim: INTEGER           :1EE0DA0BB48E6AC7
 1371:d=4  hl=2 l=  13 cons: SEQUENCE          
 1373:d=5  hl=2 l=   9 prim: OBJECT            :sha384WithRSAEncryption
 1384:d=5  hl=2 l=   0 prim: NULL              
 1386:d=4  hl=2 l=  79 cons: SEQUENCE          
 1388:d=5  hl=2 l=  43 cons: SET               
 1390:d=6  hl=2 l=  41 cons: SEQUENCE          
 1392:d=7  hl=2 l=   3 prim: OBJECT            :commonName
 1397:d=7  hl=2 l=  34 prim: UTF8STRING        :Apple X86 Secure Boot Root CA - G1
 1433:d=5  hl=2 l=  19 cons: SET               
 1435:d=6  hl=2 l=  17 cons: SEQUENCE          
 1437:d=7  hl=2 l=   3 prim: OBJECT            :organizationName
 1442:d=7  hl=2 l=  10 prim: UTF8STRING        :Apple Inc.
 1454:d=5  hl=2 l=  11 cons: SET               
 1456:d=6  hl=2 l=   9 cons: SEQUENCE          
 1458:d=7  hl=2 l=   3 prim: OBJECT            :countryName
 1463:d=7  hl=2 l=   2 prim: PRINTABLESTRING   :US
 1467:d=4  hl=2 l=  30 cons: SEQUENCE          
 1469:d=5  hl=2 l=  13 prim: UTCTIME           :170323023003Z
 1484:d=5  hl=2 l=  13 prim: UTCTIME           :170323214243Z
 1499:d=4  hl=2 l=  89 cons: SEQUENCE          
 1501:d=5  hl=2 l=  53 cons: SET               
 1503:d=6  hl=2 l=  51 cons: SEQUENCE          
 1505:d=7  hl=2 l=   3 prim: OBJECT            :commonName
 1510:d=7  hl=2 l=  44 prim: UTF8STRING        :T8012Mac-TssLive-ManifestKey-RevB-DataCenter
 1556:d=5  hl=2 l=  19 cons: SET               
 1558:d=6  hl=2 l=  17 cons: SEQUENCE          
 1560:d=7  hl=2 l=   3 prim: OBJECT            :organizationName
 1565:d=7  hl=2 l=  10 prim: UTF8STRING        :Apple Inc.
 1577:d=5  hl=2 l=  11 cons: SET               
 1579:d=6  hl=2 l=   9 cons: SEQUENCE          
 1581:d=7  hl=2 l=   3 prim: OBJECT            :countryName
 1586:d=7  hl=2 l=   2 prim: PRINTABLESTRING   :US
 1590:d=4  hl=4 l= 546 cons: SEQUENCE          
 1594:d=5  hl=2 l=  13 cons: SEQUENCE          
 1596:d=6  hl=2 l=   9 prim: OBJECT            :rsaEncryption
 1607:d=6  hl=2 l=   0 prim: NULL              
 1609:d=5  hl=4 l= 527 prim: BIT STRING        
 2140:d=4  hl=4 l= 368 cons: cont [ 3 ]        
 2144:d=5  hl=4 l= 364 cons: SEQUENCE          
 2148:d=6  hl=2 l=  12 cons: SEQUENCE          
 2150:d=7  hl=2 l=   3 prim: OBJECT            :X509v3 Basic Constraints
 2155:d=7  hl=2 l=   1 prim: BOOLEAN           :255
 2158:d=7  hl=2 l=   2 prim: OCTET STRING      [HEX DUMP]:3000
 2162:d=6  hl=2 l=  31 cons: SEQUENCE          
 2164:d=7  hl=2 l=   3 prim: OBJECT            :X509v3 Authority Key Identifier
 2169:d=7  hl=2 l=  24 prim: OCTET STRING      [HEX DUMP]:301680147D73CE0A3B41A1A352D2B1141EF6F5B4DD76E6E8
 2195:d=6  hl=2 l=  29 cons: SEQUENCE          
 2197:d=7  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Key Identifier
 2202:d=7  hl=2 l=  22 prim: OCTET STRING      [HEX DUMP]:04142875BCA84CDB09E7A079626F471A36E90A89CB9B
 2226:d=6  hl=2 l=  14 cons: SEQUENCE          
 2228:d=7  hl=2 l=   3 prim: OBJECT            :X509v3 Key Usage
 2233:d=7  hl=2 l=   1 prim: BOOLEAN           :255
 2236:d=7  hl=2 l=   4 prim: OCTET STRING      [HEX DUMP]:03020780
 2242:d=6  hl=4 l= 266 cons: SEQUENCE          
 2246:d=7  hl=2 l=  10 prim: OBJECT            :1.2.840.113635.100.6.1.15
 2258:d=7  hl=2 l=   1 prim: BOOLEAN           :255
 2261:d=7  hl=3 l= 248 prim: OCTET STRING      [HEX DUMP]:31...
 2512:d=3  hl=2 l=  13 cons: SEQUENCE          
 2514:d=4  hl=2 l=   9 prim: OBJECT            :sha384WithRSAEncryption
 2525:d=4  hl=2 l=   0 prim: NULL              
 2527:d=3  hl=4 l= 513 prim: BIT STRING                                              .&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/13a2b419416f8fd010a7c8fcda2a9b87.js?file=08_snip.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;strong&gt;boot.efi.j137ap.im4m:&lt;/strong&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;openssl asn1parse -inform DER -in boot.efi.j137ap.im4m

    0:d=0  hl=4 l=3008 cons: SEQUENCE          
    4:d=1  hl=2 l=   4 prim: IA5STRING         :IM4M
   10:d=1  hl=2 l=   1 prim: INTEGER           :00
   13:d=1  hl=4 l= 774 cons: SET               
   17:d=2  hl=9 l= 765 cons: priv [ 1296125506 ] 
   26:d=3  hl=4 l= 761 cons: SEQUENCE          
   30:d=4  hl=2 l=   4 prim: IA5STRING         :MANB
   36:d=4  hl=4 l= 751 cons: SET               
   40:d=5  hl=8 l= 195 cons: priv [ 1296125520 ] 
   48:d=6  hl=3 l= 192 cons: SEQUENCE          
   51:d=7  hl=2 l=   4 prim: IA5STRING         :MANP
   57:d=7  hl=3 l= 183 cons: SET               
   60:d=8  hl=7 l=  11 cons: priv [ 1112494660 ] 
   67:d=9  hl=2 l=   9 cons: SEQUENCE          
   69:d=10 hl=2 l=   4 prim: IA5STRING         :BORD
   75:d=10 hl=2 l=   1 prim: INTEGER           :0A
   78:d=8  hl=7 l=  11 cons: priv [ 1128616015 ] 
   85:d=9  hl=2 l=   9 cons: SEQUENCE          
   87:d=10 hl=2 l=   4 prim: IA5STRING         :CEPO
   93:d=10 hl=2 l=   1 prim: INTEGER           :02
   96:d=8  hl=7 l=  13 cons: priv [ 1128810832 ] 
  103:d=9  hl=2 l=  11 cons: SEQUENCE          
  105:d=10 hl=2 l=   4 prim: IA5STRING         :CHIP
  111:d=10 hl=2 l=   3 prim: INTEGER           :8012
  116:d=8  hl=7 l=  11 cons: priv [ 1396985677 ] 
  123:d=9  hl=2 l=   9 cons: SEQUENCE          
  125:d=10 hl=2 l=   4 prim: IA5STRING         :SDOM
  131:d=10 hl=2 l=   1 prim: INTEGER           :01
  134:d=8  hl=7 l=  11 cons: priv [ 1769303906 ] 
  141:d=9  hl=2 l=   9 cons: SEQUENCE          
  143:d=10 hl=2 l=   4 prim: IA5STRING         :iuob
  149:d=10 hl=2 l=   1 prim: BOOLEAN           :0
  152:d=8  hl=7 l=  11 cons: priv [ 1836085871 ] 
  159:d=9  hl=2 l=   9 cons: SEQUENCE          
  161:d=10 hl=2 l=   4 prim: IA5STRING         :mpro
  167:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  170:d=8  hl=7 l=  11 cons: priv [ 1836279139 ] 
  177:d=9  hl=2 l=   9 cons: SEQUENCE          
  179:d=10 hl=2 l=   4 prim: IA5STRING         :msec
  185:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  188:d=8  hl=7 l=  30 cons: priv [ 1936881262 ] 
  195:d=9  hl=2 l=  28 cons: SEQUENCE          
  197:d=10 hl=2 l=   4 prim: IA5STRING         :srvn
  203:d=10 hl=2 l=  20 prim: OCTET STRING      [HEX DUMP]:03...
  225:d=8  hl=7 l=  11 cons: priv [ 2020960115 ] 
  232:d=9  hl=2 l=   9 cons: SEQUENCE          
  234:d=10 hl=2 l=   4 prim: IA5STRING         :xugs
  240:d=10 hl=2 l=   1 prim: INTEGER           :01
  243:d=5  hl=8 l= 129 cons: priv [ 1701210466 ] 
  251:d=6  hl=2 l= 127 cons: SEQUENCE          
  253:d=7  hl=2 l=   4 prim: IA5STRING         :efib
  259:d=7  hl=2 l= 119 cons: SET               
  261:d=8  hl=7 l=  58 cons: priv [ 1145525076 ] 
  268:d=9  hl=2 l=  56 cons: SEQUENCE          
  270:d=10 hl=2 l=   4 prim: IA5STRING         :DGST
  276:d=10 hl=2 l=  48 prim: OCTET STRING      [HEX DUMP]:82...
  326:d=8  hl=7 l=  11 cons: priv [ 1162560857 ] 
  333:d=9  hl=2 l=   9 cons: SEQUENCE          
  335:d=10 hl=2 l=   4 prim: IA5STRING         :EKEY
  341:d=10 hl=2 l=   1 prim: BOOLEAN           :0
  344:d=8  hl=7 l=  11 cons: priv [ 1162891855 ] 
  351:d=9  hl=2 l=   9 cons: SEQUENCE          
  353:d=10 hl=2 l=   4 prim: IA5STRING         :EPRO
  359:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  362:d=8  hl=7 l=  11 cons: priv [ 1163085123 ] 
  369:d=9  hl=2 l=   9 cons: SEQUENCE          
  371:d=10 hl=2 l=   4 prim: IA5STRING         :ESEC
  377:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  380:d=5  hl=8 l= 129 cons: priv [ 1752198517 ] 
  388:d=6  hl=2 l= 127 cons: SEQUENCE          
  390:d=7  hl=2 l=   4 prim: IA5STRING         :hpmu
  396:d=7  hl=2 l= 119 cons: SET               
  398:d=8  hl=7 l=  58 cons: priv [ 1145525076 ] 
  405:d=9  hl=2 l=  56 cons: SEQUENCE          
  407:d=10 hl=2 l=   4 prim: IA5STRING         :DGST
  413:d=10 hl=2 l=  48 prim: OCTET STRING      [HEX DUMP]:C9...
  463:d=8  hl=7 l=  11 cons: priv [ 1162560857 ] 
  470:d=9  hl=2 l=   9 cons: SEQUENCE          
  472:d=10 hl=2 l=   4 prim: IA5STRING         :EKEY
  478:d=10 hl=2 l=   1 prim: BOOLEAN           :0
  481:d=8  hl=7 l=  11 cons: priv [ 1162891855 ] 
  488:d=9  hl=2 l=   9 cons: SEQUENCE          
  490:d=10 hl=2 l=   4 prim: IA5STRING         :EPRO
  496:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  499:d=8  hl=7 l=  11 cons: priv [ 1163085123 ] 
  506:d=9  hl=2 l=   9 cons: SEQUENCE          
  508:d=10 hl=2 l=   4 prim: IA5STRING         :ESEC
  514:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  517:d=5  hl=8 l= 129 cons: priv [ 1835758190 ] 
  525:d=6  hl=2 l= 127 cons: SEQUENCE          
  527:d=7  hl=2 l=   4 prim: IA5STRING         :mkrn
  533:d=7  hl=2 l= 119 cons: SET               
  535:d=8  hl=7 l=  58 cons: priv [ 1145525076 ] 
  542:d=9  hl=2 l=  56 cons: SEQUENCE          
  544:d=10 hl=2 l=   4 prim: IA5STRING         :DGST
  550:d=10 hl=2 l=  48 prim: OCTET STRING      [HEX DUMP]:EF...
  600:d=8  hl=7 l=  11 cons: priv [ 1162560857 ] 
  607:d=9  hl=2 l=   9 cons: SEQUENCE          
  609:d=10 hl=2 l=   4 prim: IA5STRING         :EKEY
  615:d=10 hl=2 l=   1 prim: BOOLEAN           :0
  618:d=8  hl=7 l=  11 cons: priv [ 1162891855 ] 
  625:d=9  hl=2 l=   9 cons: SEQUENCE          
  627:d=10 hl=2 l=   4 prim: IA5STRING         :EPRO
  633:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  636:d=8  hl=7 l=  11 cons: priv [ 1163085123 ] 
  643:d=9  hl=2 l=   9 cons: SEQUENCE          
  645:d=10 hl=2 l=   4 prim: IA5STRING         :ESEC
  651:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  654:d=5  hl=8 l= 129 cons: priv [ 1836413028 ] 
  662:d=6  hl=2 l= 127 cons: SEQUENCE          
  664:d=7  hl=2 l=   4 prim: IA5STRING         :mupd
  670:d=7  hl=2 l= 119 cons: SET               
  672:d=8  hl=7 l=  58 cons: priv [ 1145525076 ] 
  679:d=9  hl=2 l=  56 cons: SEQUENCE          
  681:d=10 hl=2 l=   4 prim: IA5STRING         :DGST
  687:d=10 hl=2 l=  48 prim: OCTET STRING      [HEX DUMP]:2C...
  737:d=8  hl=7 l=  11 cons: priv [ 1162560857 ] 
  744:d=9  hl=2 l=   9 cons: SEQUENCE          
  746:d=10 hl=2 l=   4 prim: IA5STRING         :EKEY
  752:d=10 hl=2 l=   1 prim: BOOLEAN           :0
  755:d=8  hl=7 l=  11 cons: priv [ 1162891855 ] 
  762:d=9  hl=2 l=   9 cons: SEQUENCE          
  764:d=10 hl=2 l=   4 prim: IA5STRING         :EPRO
  770:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  773:d=8  hl=7 l=  11 cons: priv [ 1163085123 ] 
  780:d=9  hl=2 l=   9 cons: SEQUENCE          
  782:d=10 hl=2 l=   4 prim: IA5STRING         :ESEC
  788:d=10 hl=2 l=   1 prim: BOOLEAN           :255
  791:d=1  hl=4 l= 512 prim: OCTET STRING      [HEX DUMP]:8E...
 1307:d=1  hl=4 l=1701 cons: SEQUENCE          
 1311:d=2  hl=4 l=1697 cons: SEQUENCE          
 1315:d=3  hl=4 l=1161 cons: SEQUENCE          
 1319:d=4  hl=2 l=   3 cons: cont [ 0 ]        
 1321:d=5  hl=2 l=   1 prim: INTEGER           :02
 1324:d=4  hl=2 l=   8 prim: INTEGER           :32A3D9F1951CCCCC
 1334:d=4  hl=2 l=  13 cons: SEQUENCE          
 1336:d=5  hl=2 l=   9 prim: OBJECT            :sha384WithRSAEncryption
 1347:d=5  hl=2 l=   0 prim: NULL              
 1349:d=4  hl=2 l=  79 cons: SEQUENCE          
 1351:d=5  hl=2 l=  43 cons: SET               
 1353:d=6  hl=2 l=  41 cons: SEQUENCE          
 1355:d=7  hl=2 l=   3 prim: OBJECT            :commonName
 1360:d=7  hl=2 l=  34 prim: UTF8STRING        :Apple X86 Secure Boot Root CA - G1
 1396:d=5  hl=2 l=  19 cons: SET               
 1398:d=6  hl=2 l=  17 cons: SEQUENCE          
 1400:d=7  hl=2 l=   3 prim: OBJECT            :organizationName
 1405:d=7  hl=2 l=  10 prim: UTF8STRING        :Apple Inc.
 1417:d=5  hl=2 l=  11 cons: SET               
 1419:d=6  hl=2 l=   9 cons: SEQUENCE          
 1421:d=7  hl=2 l=   3 prim: OBJECT            :countryName
 1426:d=7  hl=2 l=   2 prim: PRINTABLESTRING   :US
 1430:d=4  hl=2 l=  30 cons: SEQUENCE          
 1432:d=5  hl=2 l=  13 prim: UTCTIME           :170323023206Z
 1447:d=5  hl=2 l=  13 prim: UTCTIME           :170323214243Z
 1462:d=4  hl=2 l=  95 cons: SEQUENCE          
 1464:d=5  hl=2 l=  59 cons: SET               
 1466:d=6  hl=2 l=  57 cons: SEQUENCE          
 1468:d=7  hl=2 l=   3 prim: OBJECT            :commonName
 1473:d=7  hl=2 l=  50 prim: UTF8STRING        :T8012Mac-TssLive-ManifestKeyGlobal-RevB-DataCenter
 1525:d=5  hl=2 l=  19 cons: SET               
 1527:d=6  hl=2 l=  17 cons: SEQUENCE          
 1529:d=7  hl=2 l=   3 prim: OBJECT            :organizationName
 1534:d=7  hl=2 l=  10 prim: UTF8STRING        :Apple Inc.
 1546:d=5  hl=2 l=  11 cons: SET               
 1548:d=6  hl=2 l=   9 cons: SEQUENCE          
 1550:d=7  hl=2 l=   3 prim: OBJECT            :countryName
 1555:d=7  hl=2 l=   2 prim: PRINTABLESTRING   :US
 1559:d=4  hl=4 l= 546 cons: SEQUENCE          
 1563:d=5  hl=2 l=  13 cons: SEQUENCE          
 1565:d=6  hl=2 l=   9 prim: OBJECT            :rsaEncryption
 1576:d=6  hl=2 l=   0 prim: NULL              
 1578:d=5  hl=4 l= 527 prim: BIT STRING        
 2109:d=4  hl=4 l= 367 cons: cont [ 3 ]        
 2113:d=5  hl=4 l= 363 cons: SEQUENCE          
 2117:d=6  hl=2 l=  12 cons: SEQUENCE          
 2119:d=7  hl=2 l=   3 prim: OBJECT            :X509v3 Basic Constraints
 2124:d=7  hl=2 l=   1 prim: BOOLEAN           :255
 2127:d=7  hl=2 l=   2 prim: OCTET STRING      [HEX DUMP]:3000
 2131:d=6  hl=2 l=  31 cons: SEQUENCE          
 2133:d=7  hl=2 l=   3 prim: OBJECT            :X509v3 Authority Key Identifier
 2138:d=7  hl=2 l=  24 prim: OCTET STRING      [HEX DUMP]:301680147D73CE0A3B41A1A352D2B1141EF6F5B4DD76E6E8
 2164:d=6  hl=2 l=  29 cons: SEQUENCE          
 2166:d=7  hl=2 l=   3 prim: OBJECT            :X509v3 Subject Key Identifier
 2171:d=7  hl=2 l=  22 prim: OCTET STRING      [HEX DUMP]:0414345D0DE5ABC4C554E33A00548F9E53B037F87514
 2195:d=6  hl=2 l=  14 cons: SEQUENCE          
 2197:d=7  hl=2 l=   3 prim: OBJECT            :X509v3 Key Usage
 2202:d=7  hl=2 l=   1 prim: BOOLEAN           :255
 2205:d=7  hl=2 l=   4 prim: OCTET STRING      [HEX DUMP]:03020780
 2211:d=6  hl=4 l= 265 cons: SEQUENCE          
 2215:d=7  hl=2 l=  10 prim: OBJECT            :1.2.840.113635.100.6.1.15
 2227:d=7  hl=2 l=   1 prim: BOOLEAN           :255
 2230:d=7  hl=3 l= 247 prim: OCTET STRING      [HEX DUMP]:31...
 2480:d=3  hl=2 l=  13 cons: SEQUENCE          
 2482:d=4  hl=2 l=   9 prim: OBJECT            :sha384WithRSAEncryption
 2493:d=4  hl=2 l=   0 prim: NULL              
 2495:d=3  hl=4 l= 513 prim: BIT STRING        &lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/13a2b419416f8fd010a7c8fcda2a9b87.js?file=09_snip.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Cool details!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;There‚Äôs an embedded x509 cert in there, coming from ‚ÄúApple X86 Secure Boot Root CA - G1‚Äù and ‚ÄúT8012Mac-TssLive-ManifestKeyGlobal-RevB-DataCenter‚Äù, for validating the signature.&lt;/p&gt;

&lt;p&gt;And there‚Äôs a lot of those 4 letter fields: BORD, CHIP, etc.&lt;/p&gt;

&lt;p&gt;Each of those is probably related to one of the attributes like we saw being supplied in the install.log to the personalization service.&lt;/p&gt;

&lt;p&gt;What‚Äôs very interesting is that the ECID field is very definitely present in the Full Security mode manifest, but is &lt;em&gt;missing&lt;/em&gt; in the Medium Security manifest. Yet again more confirmation that they‚Äôre not tied to specific hardware.&lt;/p&gt;

&lt;p&gt;This would seem to imply that unlike Full Security mode, in Medium Security mode you could simply place already generated and correct .im4m manifests on disk - without access to the internet - as no device-specific personalization needs to occur.&lt;/p&gt;

&lt;p&gt;One complete set of .im4m signature files is good for that OS on whatever hardware it‚Äôs compatible with.&lt;/p&gt;

&lt;p&gt;(The phrase ‚Äúair gapped imaging‚Äù comes to mind ‚Ä¶)&lt;/p&gt;

&lt;p&gt;And now that I‚Äôve mentioned it - let‚Äôs talk about all of this in the context of imaging.&lt;/p&gt;

&lt;h2 id=&quot;the-lifespan-of-imaging-not-as-dead-as-we-thought-yet&quot;&gt;The lifespan of imaging: not as dead as we thought, yet&lt;/h2&gt;

&lt;p&gt;Some of us in the community have spoken quite well about it already:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://www.youtube.com/watch?v=pStw0zPZr_M&quot;&gt;Imaging is Dead: Now What?&lt;/a&gt; (by the masterful Greg Neagle)&lt;/li&gt;
  &lt;li&gt;&lt;a href=&quot;https://derflounder.wordpress.com/2017/01/10/imaging-will-be-dead-soon-ish/&quot;&gt;Imaging will be dead soonish&lt;/a&gt; (by the Blogfather himself, Rich Trouton)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;In the early first release days of the iMac Pro, there was talk that you couldn‚Äôt use &lt;code class=&quot;highlighter-rouge&quot;&gt;asr&lt;/code&gt; to restore an OS image to the device and have it boot out of the box.&lt;/p&gt;

&lt;p&gt;However, if you were fortunate enough to have two iMac Pros (or brave enough to try from Internet Recovery), they could apparently image themselves.&lt;/p&gt;

&lt;p&gt;Did you bother to check back after this news? Have you tried it again recently?&lt;/p&gt;

&lt;p&gt;If you‚Äôre making a never booted image with wonderful tools like &lt;a href=&quot;https://github.com/MagerValp/AutoDMG&quot;&gt;AutoDMG&lt;/a&gt;, these days &lt;code class=&quot;highlighter-rouge&quot;&gt;asr&lt;/code&gt; can very definitely restore a booting macOS onto these devices, even if the host device running the &lt;code class=&quot;highlighter-rouge&quot;&gt;asr&lt;/code&gt; restore is &lt;strong&gt;not&lt;/strong&gt; a Secure Boot device.&lt;/p&gt;

&lt;p&gt;So what changed?&lt;/p&gt;

&lt;p&gt;When the iMac Pro came out, it was running a special fork (not uncommon for new hardware builds) of the current OS at the time: macOS 10.13.3 build 17D2047&lt;/p&gt;

&lt;p&gt;When 10.13.4 was released, it was a unified build and the iMac Pro no longer ran its own fork.&lt;/p&gt;

&lt;p&gt;So, using the knowledge of ‚Äúperzonalization‚Äù above, can we look at the &lt;code class=&quot;highlighter-rouge&quot;&gt;asr&lt;/code&gt; command itself and see what may have changed?&lt;/p&gt;

&lt;p&gt;Let‚Äôs try some of my most favorite (and built-in) tooling to peek at the binary - &lt;code class=&quot;highlighter-rouge&quot;&gt;strings&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;otool&lt;/code&gt;:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;strings /usr/sbin/asr | grep -i personaliz
no-personalization
Couldn't personalize volume %s
Personalization failed with error %d, line %d
no-personalize
personalizationRequiredForVolumeAtMountPoint:
networkAvailableForPersonalizationWithOptions:
personalizeVolumeAtMountPointForInstall:outputDirectory:options:completionHandler:
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;otool -L /usr/sbin/asr | grep -i personaliz
	/System/Library/PrivateFrameworks/OSPersonalization.framework/Versions/A/OSPersonalization (compatibility version 1.0.0, current version 48.1.0)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;It would appear &lt;code class=&quot;highlighter-rouge&quot;&gt;asr&lt;/code&gt; gained a new trick!&lt;/p&gt;

&lt;p&gt;In fact, the &lt;code class=&quot;highlighter-rouge&quot;&gt;asr&lt;/code&gt; in the iMac Pro‚Äôs copy of 10.13.3 already had this new capability, which is why it worked from device to device &lt;a href=&quot;https://managingosx.wordpress.com/2018/01/25/early-notes-on-deploying-images-to-imac-pro/&quot;&gt;or from within Recovery to itself&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;asr&lt;/code&gt; on any 10.13.4+ macOS version now has the same capability without the need for special undocumented flags or tricks.&lt;/p&gt;

&lt;p&gt;If you tinker a little deeper (like I have), you‚Äôll find out that there‚Äôs code in the OSPersonalization PrivateFramework to &lt;strong&gt;read the ECID of a target disk mode attached device&lt;/strong&gt;. This allows it to personalize a device even in Full Security mode with the ECID-specific, device-specific manifest.&lt;/p&gt;

&lt;h2 id=&quot;the-million-dollar-question&quot;&gt;The Million Dollar Question&lt;/h2&gt;

&lt;p&gt;So. Should you image?&lt;/p&gt;

&lt;p&gt;Apple tells you blatantly: &lt;strong&gt;NO&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://support.apple.com/en-us/HT208020&quot;&gt;How to install macOS at your organization&lt;/a&gt;&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apple doesn‚Äôt recommend or support monolithic system imaging as an installation method, because the system image might not include model-specific information such as firmware updates.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Or do they? Read it again.&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apple doesn‚Äôt recommend or support&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;They don‚Äôt say you &lt;em&gt;can‚Äôt&lt;/em&gt;. Just that they &lt;em&gt;don‚Äôt recommend it&lt;/em&gt;. That it‚Äôs &lt;em&gt;not supported&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;They quite obviously built the functionality into &lt;code class=&quot;highlighter-rouge&quot;&gt;asr&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;but---should-you&quot;&gt;But - should you?&lt;/h3&gt;

&lt;p&gt;It‚Äôs hard to beat the speed of target disk mode restore of an AutoDMG built image.&lt;/p&gt;

&lt;p&gt;And Secure Boot devices support Target Disk mode out of the box. This means you can restore a personalized image to a Secure Boot device and it will boot it first try. Suddenly a ‚Äúlight touch‚Äù (hold T at boot) workflow is back. And there are amazing tools starting to be available out there for this like &lt;a href=&quot;https://github.com/google/restor&quot;&gt;Google‚Äôs Restor&lt;/a&gt;.&lt;/p&gt;

&lt;h3 id=&quot;but---should-you-1&quot;&gt;But - should you?&lt;/h3&gt;

&lt;p&gt;Are you someone that needs to worry that a delivered device has been manipulated mid-shipment?&lt;/p&gt;

&lt;p&gt;If you try placing a simple LaunchDaemon on a Secure Boot device‚Äôs System volume, it doesn‚Äôt stop it from booting in Full Security mode. That‚Äôs not one of the things in the signature manifest. Honestly there are a billion places the OS could be modified to auto-launch things as root at start up. Secure Boot checks &lt;em&gt;some&lt;/em&gt; things. It doesn‚Äôt check &lt;em&gt;all things&lt;/em&gt; (yet?). It‚Äôs focused right now on securing the core of the boot process.&lt;/p&gt;

&lt;p&gt;So what do you do in that situation instead? Internet Recovery?&lt;/p&gt;

&lt;p&gt;Guess how many machines you could have restored back to vanilla with something like Restor in the same amount of time.&lt;/p&gt;

&lt;h3 id=&quot;but---should-you-2&quot;&gt;But - should you?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;because the system image might not include model-specific information such as firmware updates&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This warning is something to consider. There have been definite changes in how the OS installer works. If you were going to do image restoring workflows, you should consider that portions of your device may not have the necessary software if you‚Äôre restoring anything other than the last OS version it ran. To make this effective, you‚Äôd probably need to keep your fleet of devices on top of OS updates and make sure your restoration image is the latest OS version with patches at all times.&lt;/p&gt;

&lt;h3 id=&quot;but---should-you-3&quot;&gt;But - should you?&lt;/h3&gt;

&lt;p&gt;There are also alternative projects out there that are more than ‚Äúlight touch‚Äù but still drastically less than running through Setup Assistant just to create an account you‚Äôll destroy again. An example of this is &lt;a href=&quot;https://managingosx.wordpress.com/2018/01/17/bootstrappr/&quot;&gt;Greg Neagle‚Äôs Bootstrappr&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Boot into recovery, type two commands, and you‚Äôre off to the races.&lt;/p&gt;

&lt;p&gt;But this only works for provisioning clean machines. If you‚Äôre bringing devices back from users to be redeployed, it won‚Äôt wipe and restore the machines to a pristine state or deal with FileVault encrypted disks, etc. So you‚Äôre still looking at something like Internet Recovery to return the device to a new state.&lt;/p&gt;

&lt;h3 id=&quot;but---should-you-4&quot;&gt;But - should you?&lt;/h3&gt;

&lt;p&gt;Secure Boot macOS devices are still very new! There are definitely corners and edges around the concept of imaging them that we surely haven‚Äôt stumbled over yet.&lt;/p&gt;

&lt;h3 id=&quot;but---should-you-5&quot;&gt;But - should you?&lt;/h3&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apple doesn‚Äôt recommend or support&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;I think if you read between the lines there, Apple understands that right now some organizations may feel they have the need for these workflows still.&lt;/p&gt;

&lt;p&gt;If Apple continues down similar paths to what it‚Äôs done with iOS, they could eventually possibly split the OS into its own volume - possibly even in a read only image with all mutable and user data stored separately.&lt;/p&gt;

&lt;p&gt;If they ever get to that state, some of the security concerns above will just evaporate. The only OS on the device will be one that‚Äôs trusted and verified to a deeper state than macOS is today. We could even gain the ‚ÄúErase All Content And Settings‚Äù functionality.&lt;/p&gt;

&lt;p&gt;Nobody but Apple knows will be next. But they do, in the meantime, provide guidance.&lt;/p&gt;

&lt;p&gt;And their guidance is that you should be looking at DEP/MDM-based workflows for your provisioning. The latest operating system versions already include some features (like managing automatic kernel extension loading) that can only be done &lt;em&gt;remotely&lt;/em&gt; and adjusted post-deployment &lt;a href=&quot;https://support.apple.com/en-us/HT208019&quot;&gt;via MDM deployed profiles&lt;/a&gt;. SIU had the capability to make network bootable images that ran &lt;code class=&quot;highlighter-rouge&quot;&gt;scutil&lt;/code&gt; to reconfigure the trust settings, but all of that is moot now that Secure Boot devices don‚Äôt network boot at all. MDM is the only game.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;If you or your organization feel the need to image devices, then do so.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Just know &lt;em&gt;why&lt;/em&gt; you‚Äôre doing it. &lt;strong&gt;Simply putting files on disk isn‚Äôt a good enough reason.&lt;/strong&gt; MDM or MDM-deployed agents can do that.&lt;/p&gt;

&lt;p&gt;And be aware it is very very &lt;em&gt;very&lt;/em&gt; likely not a long term solution.&lt;/p&gt;

&lt;p&gt;You should definitely, in the meantime, be getting MDM going in your environment.&lt;/p&gt;

&lt;p&gt;As always, hope this helps.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- mike&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;postscript -&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;With access to the 2018 MacBook Pro, if you look at the Preboot volume, you‚Äôll see two different but similar files for its version of macOS.&lt;/p&gt;

&lt;p&gt;Instead of just the ‚Äúj137ap‚Äù .im4m files, you‚Äôll also see ‚Äúj680ap‚Äù and ‚Äúj132ap‚Äù files.&lt;/p&gt;

&lt;p&gt;Going back to the install.log again, you can find this line:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;	    HardwareModel = j137ap;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Quick Google searches will suggest that ‚Äúj137ap‚Äù is likely an internal model identifier of either the iMac Pro itself or the specific T2 chip inside it. ‚Äúj680ap‚Äù and ‚Äúj132ap‚Äù, with a little poking around, you‚Äôll find are for the new 13‚Äù and 15‚Äù 2018 MacBook Pro devices.&lt;/p&gt;

&lt;p&gt;This would indicate that the signatures, while ‚Äúgeneric‚Äù in Medium mode, do still need to exist for the specific Secure Boot device model you‚Äôre attempting to boot it on.&lt;/p&gt;

</description>
        <pubDate>Fri, 27 Jul 2018 12:00:00 -0700</pubDate>
        <link>http://michaellynn.github.io/2018/07/27/booting-secure/</link>
        <guid isPermaLink="true">http://michaellynn.github.io/2018/07/27/booting-secure/</guid>
      </item>
    
      <item>
        <title>m(DM)acOS</title>
        <description>&lt;p&gt;&lt;small&gt;[ &lt;strong&gt;Disclaimer:&lt;/strong&gt; This blog post is only a personal, ficticious thought experiment. If you‚Äôre a Mac administrator, I recommend you read it. Regardless of whether this thought experiment turns out to be reality or fiction, the conclusion contains some &lt;em&gt;very&lt;/em&gt; good advice that I‚Äôd recommend - no matter what the future holds. &lt;em&gt;- mike&lt;/em&gt; ]&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;Howdy.&lt;/p&gt;

&lt;p&gt;It‚Äôs been almost a year or so since my last blog post.&lt;/p&gt;

&lt;p&gt;I‚Äôve been kinda busy with my fun new job.&lt;/p&gt;

&lt;p&gt;I‚Äôll try to do more fun posts soon-ish (did you see this neat thing I did at the &lt;a href=&quot;http://macadmins.psu.edu&quot;&gt;PSU Macadmins&lt;/a&gt; hackathon called &lt;a href=&quot;https://github.com/pudquick/nibbler&quot;&gt;nibbler&lt;/a&gt;?)&lt;/p&gt;

&lt;p&gt;But I wanted to take some time to write this out, since it‚Äôs been rattling in my head since WWDC: &lt;strong&gt;MDM is&lt;/strong&gt; &lt;em&gt;(probably)&lt;/em&gt; &lt;strong&gt;coming&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;Maybe. I‚Äôm guessing. But I think all the clues are there.&lt;/p&gt;

&lt;p&gt;If you didn‚Äôt pay much attention to the last WWDC Apple held, there was some &lt;em&gt;amazing&lt;/em&gt; information about the things to come.&lt;/p&gt;

&lt;p&gt;The best part is that it‚Äôs &lt;strong&gt;ok to talk about it&lt;/strong&gt;, because they updated their Developer License agreement section ‚ÄúInformation Deemed Apple Confidential‚Äù to include the following words:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Further, Apple agrees that You will not be bound by the foregoing confidentiality terms with regard to technical information about pre-release Apple Software and services disclosed by Apple at WWDC (Apple‚Äôs Worldwide Developers Conference), except that You may not post screen shots of, write public reviews of, or redistribute any pre-release Apple Software, Apple Services or hardware.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;What I will be discussing here is a theoretical connect-the-dots with only two main components: Technical details &lt;u&gt;that Apple has disclosed at WWDC&lt;/u&gt; and existing features in currently shipping Apple operating systems.&lt;/p&gt;

&lt;p&gt;So what did Apple talk about at WWDC that was so amazing?&lt;/p&gt;

&lt;h2 id=&quot;the-apple-file-system-apfs&quot;&gt;The Apple File System (APFS)&lt;/h2&gt;
&lt;p&gt;&lt;br /&gt;
Apple had &lt;a href=&quot;https://developer.apple.com/videos/play/wwdc2016/701/&quot;&gt;an entire session on it&lt;/a&gt; (which you can watch without a Developer ID).&lt;/p&gt;

&lt;p&gt;At WWDC, they also made available &lt;a href=&quot;https://developer.apple.com/library/content/documentation/FileManagement/Conceptual/APFS_Guide/Introduction/Introduction.html&quot;&gt;technical documentation on APFS&lt;/a&gt; (again, available without a Developer ID, even shows up in Google results).&lt;/p&gt;

&lt;p&gt;The biggest bombshell in both of those products are these lines from the technical documents:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apple File System is a new, modern file system for iOS, macOS, tvOS, and watchOS. [‚Ä¶]&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;Apple plans to release Apple File System as a bootable file system in 2017.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;and these words from the video session:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;[34:36]&lt;/strong&gt; So to summarize, Apple File System will be &lt;strong&gt;the default file system for all Apple products [in] 2017&lt;/strong&gt;, it‚Äôs ultra-modern, it‚Äôs crash protected, it supports Space Sharing, we support cloning and snapshots.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;This is Apple talking at WWDC about the next family of operating systems to be released after Sierra. Apple is stating that the new default filesystem will be APFS across &lt;em&gt;everything&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;At this point you may be asking: &lt;strong&gt;&lt;em&gt;How does that apply to MDM and why did you even make this blog post in the first place?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Almost there, just need to set the stage a tad bit more üòÑ&lt;/p&gt;

&lt;p&gt;Let‚Äôs take one other statement from the video session:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;[33:28]&lt;/strong&gt; Instead, Apple will provide an in-place upgrade path from HFS+ to Apple File System.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;For all the other devices besides Macs, they‚Äôre already running on a modified form of HFS+ with security features that you don‚Äôt see in macOS. APFS for these devices is basically a 2.0 filesystem of what they‚Äôre already doing, the next generation meant to replace and improve the existing situation. To me, this last quote feels like they‚Äôre saying: &lt;em&gt;‚ÄúWhile we‚Äôre upgrading everything, we‚Äôre going to be bringing the Macs in line with everything else.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶ So what do the OSes running on these filesystems on iOS/tvOS/watchOS look like right now?&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;You can‚Äôt use open source tools or third-party tools to install them&lt;/li&gt;
  &lt;li&gt;The OS is cryptographically signed&lt;/li&gt;
  &lt;li&gt;The OS is effectively separate from user content&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Apple &lt;a href=&quot;https://www.apple.com/business/docs/iOS_Security_Guide.pdf&quot;&gt;touts these as security features&lt;/a&gt; - and I agree 100% they are and I love them.&lt;/p&gt;

&lt;p&gt;Apple has been on a direct path towards increased user privacy and OS security (see their &lt;a href=&quot;https://www.youtube.com/watch?v=BLGFriOKz6U&quot;&gt;BlackHat talk&lt;/a&gt;, watch for the ‚ÄúPhysical One-Way Hash Function‚Äù) and I appreciate their efforts.&lt;/p&gt;

&lt;p&gt;But they don‚Äôt have it on macOS.&lt;/p&gt;

&lt;p&gt;So why wouldn‚Äôt they try to bring it over?&lt;/p&gt;

&lt;p&gt;‚Ä¶ I‚Äôm pretty sure they‚Äôre going to. Very very soon.&lt;/p&gt;

&lt;p&gt;In fact, here‚Äôs Apple‚Äôs own words on it, from their session video:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;strong&gt;[23:44]&lt;/strong&gt; In addition, this allows us to unify our encryption story across all of our platforms.&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Already, with Sierra, Apple has given a considerable number of indicators that their OS and OS update delivery mechanism is changing:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Sierra now downloads from the App Store even without being signed in&lt;/li&gt;
  &lt;li&gt;It no longer shows up in your Apple ID‚Äôs purchase history, even if signed in&lt;/li&gt;
  &lt;li&gt;It will &lt;a href=&quot;http://www.loopinsight.com/2016/10/03/apple-to-make-macos-sierra-available-as-automatic-download-beginning-today/&quot;&gt;automatically download to your machine&lt;/a&gt; if you have ‚Äúdownload newly available updates‚Äù enabled&lt;/li&gt;
  &lt;li&gt;The Software Update Service is deprecated (see the bottom of &lt;a href=&quot;https://support.apple.com/en-us/HT206871&quot;&gt;this article&lt;/a&gt;)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Again I hear you asking: &lt;strong&gt;&lt;em&gt;What does this all have to do with MDM?&lt;/em&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Apple looks to be rapidly shifting how OS delivery works on macOS.&lt;/p&gt;

&lt;p&gt;What if they‚Äôre changing OS installation to ‚Äúunify our OS story‚Äù?&lt;/p&gt;

&lt;p&gt;What would you do if the entire OS that is macOS - if &lt;em&gt;all&lt;/em&gt; of it was protected, like it is on iOS/tvOS/watchOS?&lt;/p&gt;

&lt;p&gt;I don‚Äôt just mean &lt;code class=&quot;highlighter-rouge&quot;&gt;/System&lt;/code&gt; and the things that SIP protects now.&lt;/p&gt;

&lt;p&gt;I mean &lt;em&gt;everything&lt;/em&gt; that the ‚ÄúInstall macOS Sierra.app‚Äù installs on your machine now.&lt;/p&gt;

&lt;p&gt;We‚Äôre talking &lt;code class=&quot;highlighter-rouge&quot;&gt;/etc&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;/var&lt;/code&gt;, portions of &lt;code class=&quot;highlighter-rouge&quot;&gt;/Library&lt;/code&gt;, etc. in addition to everything SIP already protects in Sierra now.&lt;/p&gt;

&lt;p&gt;Are you an administrator of Macs like I am?&lt;/p&gt;

&lt;p&gt;What if you couldn‚Äôt change &lt;code class=&quot;highlighter-rouge&quot;&gt;ntp.conf&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Or &lt;code class=&quot;highlighter-rouge&quot;&gt;ssh_config&lt;/code&gt;?&lt;/p&gt;

&lt;p&gt;Or mess with the default User Template? &lt;em&gt;(I can‚Äôt stand it if you do this, but it &lt;strong&gt;is&lt;/strong&gt; supported by Apple right now)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;What if &lt;em&gt;everything&lt;/em&gt; that is macOS was locked away?&lt;/p&gt;

&lt;p&gt;How would you manage it?
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Question:&lt;/strong&gt; How does Apple offer the ability to do that now with iOS and tvOS?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; Profiles!
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
&lt;strong&gt;Question:&lt;/strong&gt; How do you get those on your iOS devices in an automated fashion?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Answer:&lt;/strong&gt; MDM! (or Configurator, in some cases)
&lt;br /&gt;
&lt;br /&gt;
&lt;br /&gt;
If APFS is the gateway that makes macOS immutable, the road to it is being paved in whatever OS comes after Sierra, where it will be landing as the default filesystem (if they keep to their goals).&lt;/p&gt;

&lt;p&gt;That is &lt;em&gt;extremely&lt;/em&gt; fast movement on Apple‚Äôs part:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;Public testing of a &lt;em&gt;brand new&lt;/em&gt; filesystem APFS in Sierra&lt;/li&gt;
  &lt;li&gt;APFS now default filesystem in Sierra+1, with conversion of existing HFS+ filesystems to APFS&lt;/li&gt;
  &lt;li&gt;‚Ä¶ road paved for locked down OS delivery by Sierra+2 ? (Maybe +3 at the latest?)&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;And with the goal of a unified filesystem making the goal of a unified OS protection scheme within tantalizing reach - I wouldn‚Äôt be surprised to see Apple take from their existing playbook and attempt to unify their OS management model as well, offering profiles as ‚Äúthe solution‚Äù for everything OS management related on macOS.&lt;/p&gt;

&lt;h2 id=&quot;whats-the-impact-of-a-change-like-this&quot;&gt;What‚Äôs the impact of a change like this?&lt;/h2&gt;

&lt;p&gt;For the average computer user with .apps installed, web browsing, etc. they honestly might not notice a thing.&lt;/p&gt;

&lt;p&gt;‚Ä¶ But for a Mac administrator in a large organization?&lt;/p&gt;

&lt;p&gt;What good is a root-running LaunchDaemon or client agent when everything that came with the OS is immutable?&lt;/p&gt;

&lt;p&gt;What does root even mean anymore in that situation?&lt;/p&gt;

&lt;p&gt;Are you running chef? puppet? munki? Casper?&lt;/p&gt;

&lt;p&gt;Are your management tools performing security-oriented or legally-required customizations to your systems with custom scripts/logic you designed?&lt;/p&gt;

&lt;p&gt;What if they couldn‚Äôt?&lt;/p&gt;

&lt;p&gt;When all that‚Äôs left is userspace, will local administrators even need to exist? Do you have admin rights on your iOS devices right now?&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;This is part of why I &lt;a href=&quot;https://twitter.com/mikeymikey/status/781621965920489472&quot;&gt;tweeted&lt;/a&gt;&lt;/strong&gt;, asking my fellow Mac administrator followers what they‚Äôre doing right now that they can‚Äôt do with a profile at the moment on macOS.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;If everything you‚Äôre managing right now&lt;/em&gt; isn‚Äôt filed in a radar to Apple asking for an officially approved mechanism to manage this aspect of their OS, how will Apple know to give you a handle on wrangling these settings when they change the security model of macOS to ‚Äúunify their OS story‚Äù?&lt;/p&gt;

&lt;p&gt;I got a lot of responses. I‚Äôll be writing them up and filing them as radars. I hope you do the same.&lt;/p&gt;

&lt;h2 id=&quot;theres-more-though&quot;&gt;There‚Äôs more, though&lt;/h2&gt;

&lt;p&gt;For a Mac administrator, the impact of such a change as this would be much more than just settings management.&lt;/p&gt;

&lt;p&gt;Do you ‚Äúgolden master‚Äù / block level restore your iOS devices with tools like AutoDMG, Imagr, DeployStudio, or Casper Imaging?&lt;/p&gt;

&lt;p&gt;Or do you use Apple Configurator because that‚Äôs the only choice that‚Äôs available?&lt;/p&gt;

&lt;p&gt;If Apple is going to ‚Äúunify [their] encryption story‚Äù on macOS, do you think any of the tools you have now will be able to install this new style of OS deployment?&lt;/p&gt;

&lt;p&gt;Do you NetBoot image iPhones and iPads?&lt;/p&gt;

&lt;p&gt;‚Ä¶ &lt;em&gt;I know, I know,&lt;/em&gt; I‚Äôm reallllly stretching the comparisons &lt;em&gt;quite a bit&lt;/em&gt; here - the technological history of these families of devices were vastly different and resulted in different technology management chains and solutions ‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶ But Apple is in a unifying phase now, and the dates they promise seem like they‚Äôre &lt;strong&gt;accelerating it&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;If they‚Äôre willing to kill off a very mature filesystem like HFS+, why wouldn‚Äôt they be willing to kill off NetBoot (FYI: introduced a year &lt;em&gt;after&lt;/em&gt; HFS+)?&lt;/p&gt;

&lt;p&gt;The story I paint here is quite possibly the death of most management and imaging workflows in enterprise existence today for macOS (or, at best, the ignition for the firey phoenix-like rebirth of the existing tools we have today).&lt;/p&gt;

&lt;p&gt;For some, this will feel like a bleak story.&lt;/p&gt;

&lt;p&gt;Or even a scary one.&lt;/p&gt;

&lt;p&gt;In the name of security.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;I personally think it‚Äôs a worthy goal.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;But there will be &lt;em&gt;a lot of blood, sweat, and toil&lt;/em&gt; for the administrators trying to get their environments compatible should this new future come to be.&lt;/p&gt;

&lt;p&gt;And if this is the future, Apple &lt;em&gt;really really really&lt;/em&gt; needs to engage more organizations directly and plainly about this future. We would need their help in making this a successful transition as much as Apple would need our help keeping our organizations from being so overwhelmed they‚Äôd consider moving to Linux or Windows to avoid the pain of such a major revamp.&lt;/p&gt;

&lt;p&gt;We all have undocumented internal changes in the name of security.&lt;/p&gt;

&lt;p&gt;Workarounds for &lt;em&gt;bad bad bad&lt;/em&gt; experiences (automated GarageBand and Xcode installs with all the components, anyone? I mean &lt;strong&gt;come on&lt;/strong&gt;, this isn‚Äôt even third-party software !!)&lt;/p&gt;

&lt;p&gt;Script after script after script (reordering wifi networks? trying to get certs working with third-party VPN clients?)&lt;/p&gt;

&lt;p&gt;‚Ä¶ But if Apple doesn‚Äôt know about them and hasn‚Äôt heard about them from us, they might assume that they‚Äôve provided us (the administrative community) with 95%+ of the tools that we need. Instead of the closer to 15-25% (or less) reality you feel you‚Äôre successfully ‚Äúmitigating‚Äù with internal solutions.&lt;/p&gt;

&lt;h2 id=&quot;and-what-about-reliability&quot;&gt;And what about reliability?&lt;/h2&gt;

&lt;p&gt;What if Apple followed the model they have in iOS right now and the advanced ‚Äúenterprise‚Äù management profiles required DEP / supervision?&lt;/p&gt;

&lt;p&gt;There are &lt;em&gt;lots&lt;/em&gt; of those settings on iOS. I wouldn‚Äôt be surprised to see more of them appear on macOS.&lt;/p&gt;

&lt;p&gt;What if DEP was critical to the management settings you needed - and ‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶ &lt;strong&gt;DEP&lt;/strong&gt; ‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶ &lt;strong&gt;went&lt;/strong&gt; ‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶ &lt;strong&gt;down?&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;It‚Äôs happened already.&lt;/p&gt;

&lt;p&gt;Now spinning up new devices for your organization is &lt;strong&gt;stopped&lt;/strong&gt; because DEP has an outage - and there‚Äôs &lt;em&gt;literally nothing you can do but wait&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Literally no amount of money your organization can spend on engineers to reduce the time of this problem to an equivalent-to-zero value.&lt;/p&gt;

&lt;p&gt;Is DEP as a purchasing and/or network service even available in all the markets where your organization currently purchases devices? Do you know?&lt;/p&gt;

&lt;h2 id=&quot;or-how-about-apns&quot;&gt;Or how about APNS?&lt;/h2&gt;

&lt;p&gt;MDM uses APNS to push a trigger to clients to check in sooner for updated management instructions.&lt;/p&gt;

&lt;p&gt;What if APNS fails? Your clients would still check in ‚Ä¶ eventually ‚Ä¶ sometime ‚Ä¶ maybe in 6 hours-ish? Is that fast enough? Is that level of configuration responsiveness compatible with your enterprise environment?&lt;/p&gt;

&lt;h2 id=&quot;how-about-cost&quot;&gt;How about cost?&lt;/h2&gt;

&lt;p&gt;Right now I know of a grand total of 2 open source MDM projects that specifically target macOS. And they are brand new - the oldest is a year old. And being brand new, they are raw tools for people who know what they‚Äôre doing and to experiment on. You would be hard-pressed to enroll your organization of 500+ devices into them today and expect to be able to manage all the things you want (even if all the profiles you needed magically already existed).&lt;/p&gt;

&lt;p&gt;This means you‚Äôre almost mandatorily looking at a pay-for MDM vendor solution when you may not currently have one (common when your organization relies on open source tools).&lt;/p&gt;

&lt;p&gt;This is a cost your organization hasn‚Äôt currently budgeted for your Macs. And it‚Äôs also a product that any engineers you had working on your open source tools won‚Äôt necessarily be able to have as much of an instant impact on, as the MDM solution will be closed source and you‚Äôll be restricted in what you can do by the product‚Äôs API.&lt;/p&gt;

&lt;p&gt;Would your engineers even be able to work on open source MDM?&lt;/p&gt;

&lt;p&gt;Apple has &lt;a href=&quot;https://developer.apple.com/library/content/documentation/Miscellaneous/Reference/MobileDeviceManagementProtocolRef/3-MDM_Protocol/MDM_Protocol.html&quot;&gt;some of the MDM specs published&lt;/a&gt; but this isn‚Äôt all of the documentation they have. Some of the documentation is gated behind their MDM Vendor program, which is only available to Apple Enterprise customers. Additionally, an open source MDM would need an Apple signed MDM cert to function correctly, also available through members of the MDM Vendor program. Apple hasn‚Äôt made it easy for open source MDM to exist, let alone functionally run.&lt;/p&gt;

&lt;p&gt;Are you a school? Do you even have engineers? Do you even have a budget for something like this? Or at all?&lt;/p&gt;

&lt;h2 id=&quot;how-likely-is-this&quot;&gt;How likely is this?&lt;/h2&gt;

&lt;p&gt;Did you see that &lt;a href=&quot;https://www.bushel.com/rename&quot;&gt;JAMF just renamed their MDM solution Bushel&lt;/a&gt; to ‚ÄúJAMF Now‚Äù?&lt;/p&gt;

&lt;p&gt;‚Ä¶ Does that make Casper ‚ÄúJAMF Then‚Äù?&lt;/p&gt;

&lt;p&gt;Maybe ask someone at Apple.&lt;/p&gt;

&lt;h2 id=&quot;what-could-one-do-to-prepare&quot;&gt;What could one do to prepare?&lt;/h2&gt;

&lt;ul&gt;
  &lt;li&gt;Inventory your existing management settings&lt;/li&gt;
  &lt;li&gt;Attempt to find configuration profile solutions for all of them&lt;/li&gt;
  &lt;li&gt;If they don‚Äôt exist, file radars with Apple listing the following things:
    &lt;ul&gt;
      &lt;li&gt;Identify the setting and configuration options you need&lt;/li&gt;
      &lt;li&gt;Explain why the setting is important&lt;/li&gt;
      &lt;li&gt;Explain the impact of being unable to change this setting&lt;/li&gt;
      &lt;li&gt;Explain whether alternative methods exist currently to change it&lt;/li&gt;
      &lt;li&gt;Explicitly identify the number of impacted Macs / possible sales this could impact&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;If your organization has an Apple business contact, you should talk to them about the feasibility of managing your organization‚Äôs Macs with MDM&lt;/li&gt;
  &lt;li&gt;If you do business in countries other than the US, you should check with Apple on the availability of DEP-enrolled Mac purchasing and service globally&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;Don‚Äôt boo, &lt;a href=&quot;https://bugreport.apple.com/&quot;&gt;radar&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- mike&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Tue, 04 Oct 2016 01:00:00 -0700</pubDate>
        <link>http://michaellynn.github.io/2016/10/04/mDMacOS/</link>
        <guid isPermaLink="true">http://michaellynn.github.io/2016/10/04/mDMacOS/</guid>
      </item>
    
      <item>
        <title>Apple's BookmarkData - exposed!</title>
        <description>&lt;p&gt;&lt;em&gt;(And we‚Äôll cover &lt;code class=&quot;highlighter-rouge&quot;&gt;.sfl&lt;/code&gt; files while we‚Äôre at it!)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;A good friend of mine, &lt;a href=&quot;https://twitter.com/Sacrilicious&quot;&gt;Allister&lt;/a&gt;, had an interesting question on the &lt;a href=&quot;http://macadmins.org/&quot;&gt;MacAdmins Slack&lt;/a&gt;:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;@allister: zero hits on developer.apple.com for this file extension: Library/Application Support/com.apple.sharedfilelist/com.apple.LSSharedFileList.RecentServers.sfl&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;To wit: What &lt;em&gt;are&lt;/em&gt; the &lt;code class=&quot;highlighter-rouge&quot;&gt;.sfl&lt;/code&gt; files that are appearing in OS X 10.11 El Capitan? There sure are a lot of them!&lt;/p&gt;

&lt;p&gt;Diving into the file format, it was pretty obvious it was a binary plist - and with a little more digging, an &lt;a href=&quot;https://developer.apple.com/library/watchos/documentation/Cocoa/Reference/Foundation/Classes/NSKeyedArchiver_Class/index.html&quot;&gt;NSKeyedArchiver&lt;/a&gt; file at that.&lt;/p&gt;

&lt;p&gt;Being &lt;a href=&quot;http://michaellynn.github.io/2015/07/26/exploring-os-x-preview-signatures/&quot;&gt;very familiar&lt;/a&gt; with NSKeyedArchiver formats now, it didn‚Äôt take a whole lot of effort to come up with a script that allowed me to extract the contents of the com.apple.LSSharedFileList.RecentServers.sfl file.&lt;/p&gt;

&lt;p&gt;That is - it didn‚Äôt take a lot of effort to extract the &lt;strong&gt;initial&lt;/strong&gt; layer of contents.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;{
    items =     (
        &amp;quot;&amp;lt;SFLListItem: 0x7faf19dac350&amp;gt;&amp;quot;,
        &amp;quot;&amp;lt;SFLListItem: 0x7faf19cc5430&amp;gt;&amp;quot;,
        &amp;quot;&amp;lt;SFLListItem: 0x7faf19cca510&amp;gt;&amp;quot;,
        &amp;quot;&amp;lt;SFLListItem: 0x7faf19dac5a0&amp;gt;&amp;quot;,
        &amp;quot;&amp;lt;SFLListItem: 0x7faf19da92e0&amp;gt;&amp;quot;
    );
    properties =     {
        &amp;quot;com.apple.LSSharedFileList.MaxAmount&amp;quot; = 10;
    };
    version = 1;
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/c089771fd8196f449662.js?file=01_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;At its heart, it‚Äôs a dictionary with 3 keys, the most interesting key being &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt;.&lt;/p&gt;

&lt;p&gt;The &lt;code class=&quot;highlighter-rouge&quot;&gt;items&lt;/code&gt; array is made up of &lt;code class=&quot;highlighter-rouge&quot;&gt;SFLListItem&lt;/code&gt;, a new internal object in 10.11, with the following properties:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;name&lt;/code&gt;: Display name in the list (in this case, the name of the volume)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;order&lt;/code&gt;: Number representing order within the list&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;uniqueIdentifier&lt;/code&gt;: A NSUUID generated to uniquely represent the entry in the list&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;properties&lt;/code&gt;: A dictionary with one or more keys (all of these only had ‚Äúcom.apple.LSSharedFileList.OverrideIcon.OSType‚Äù with the value ‚Äúsrvr‚Äù)&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;bookmark&lt;/code&gt;: An NSURL BookmarkData object containing information to reach the file/shares&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;If you look up &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURL_Class/#//apple_ref/doc/uid/20000301-SW34&quot;&gt;Apple‚Äôs documentation about BookmarkData&lt;/a&gt;, you‚Äôll find details about how to make them, how to open them, and how to get some &lt;em&gt;very&lt;/em&gt; basic details from them.&lt;/p&gt;

&lt;p&gt;Unfortunately, if you want to just get the share URL that was used to create the BookmarkData in the first place, the only API call Apple offers is &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURL_Class/#//apple_ref/occ/clm/NSURL/URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:&quot;&gt;this rather unsavory one&lt;/a&gt;:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;NSURL
+(instancetype)URLByResolvingBookmarkData:(NSData *)bookmarkData  
                                  options:(NSURLBookmarkResolutionOptions)options  
                            relativeToURL:(NSURL *)relativeURL  
                      bookmarkDataIsStale:(BOOL *)isStale  
                                    error:(NSError * _Nullable *)error&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/c089771fd8196f449662.js?file=02_snip.m&quot;&gt; &lt;/script&gt;

&lt;p&gt;I say ‚Äúunsavory‚Äù because of the implementation details:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;‚Äú&lt;span style=&quot;color:red&quot;&gt;This method fails&lt;/span&gt; if the original file or directory could not be located or is on a volume that could not be mounted.&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;blockquote&gt;
  &lt;p&gt;&lt;em&gt;If this method fails, you can use the resourceValuesForKeys:fromBookmarkData: method to obtain information about the bookmark, such as the last known path (NSURLPathKey) to help the user decide how to proceed.‚Äù&lt;/em&gt;&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;Even with the options &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURLBookmarkResolutionWithoutMounting&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURLBookmarkResolutionWithoutUI&lt;/code&gt;, you‚Äôll find &lt;a href=&quot;http://tangent405.com/dealing-with-slow-security-scoped-bookmarks&quot;&gt;articles like this one&lt;/a&gt; which indicate that the OS is going to attempt to resolve the resource, even if it doesn‚Äôt pop up anything to the user when it can‚Äôt find it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;And yet&lt;/em&gt;, if you open up the BookmarkData in a &lt;a href=&quot;http://ridiculousfish.com/hexfiend/&quot;&gt;hex editor&lt;/a&gt;, it‚Äôs &lt;strong&gt;obvious&lt;/strong&gt; the URL information is there in a form it should be directly extractable from. For something like a normal network share, there is absolutely &lt;strong&gt;no reason&lt;/strong&gt; to need to do any sort of resolving to be able to return this data. We should be able to just say ‚ÄúGive me the URL‚Äù and it should instantly return the value (instead of failing because the server isn‚Äôt visible on the current network).&lt;/p&gt;

&lt;p&gt;So what about the aforementioned &lt;code class=&quot;highlighter-rouge&quot;&gt;resourceValuesForKeys:fromBookmarkData:&lt;/code&gt; ?&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;USELESS!&lt;/span&gt; The NSURLPathKey for server shares appears to return the mounted volume path (&lt;code class=&quot;highlighter-rouge&quot;&gt;/Volumes/whatever&lt;/code&gt;) - &lt;strong&gt;not the URL of the server share itself&lt;/strong&gt;!&lt;/p&gt;

&lt;p&gt;‚Ä¶ Maybe it‚Äôs a resource value in a different key?&lt;/p&gt;

&lt;p&gt;But suddenly - &lt;em&gt;more&lt;/em&gt; horrible implementation details: &lt;em&gt;You can‚Äôt get the list of available keys!&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Everywhere you search, everyone just recommends &lt;a href=&quot;http://www.cocoabuilder.com/archive/cocoa/313438-how-to-get-bookmarks-data-for-non-existing-files.html&quot;&gt;‚Äútry all the keys‚Äù&lt;/a&gt; or ‚Äútry the keys you want values for‚Äù.&lt;/p&gt;

&lt;p&gt;‚Ä¶ But &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/Foundation/Classes/NSURL_Class/#//apple_ref/doc/uid/20000301-DontLinkElementID_1&quot;&gt;none of the keys&lt;/a&gt; Apple has documented return just the simple share URL. They apparently want you to only use &lt;code class=&quot;highlighter-rouge&quot;&gt;URLByResolvingBookmarkData&lt;/code&gt; for that.&lt;/p&gt;

&lt;h1 id=&quot;to-hell-with-that&quot;&gt;To hell with that!&lt;/h1&gt;

&lt;p&gt;So instead, let‚Äôs go exploring with &lt;a href=&quot;http://www.hopperapp.com&quot;&gt;my favorite disassembler&lt;/a&gt; üòÅ&lt;/p&gt;

&lt;p&gt;According to Apple‚Äôs documentation, NSURL is part of Foundation and sure enough we can find the &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURL.h&lt;/code&gt; header file within &lt;code class=&quot;highlighter-rouge&quot;&gt;Foundation.framework&lt;/code&gt;. Let‚Äôs see what Hopper tells us &lt;code class=&quot;highlighter-rouge&quot;&gt;URLByResolvingBookmarkData&lt;/code&gt; is doing:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;void * +[NSURL(NSURL) URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error:](void * self, void * _cmd, void * arg_8, unsigned int arg_C, void * arg_10, char * arg_14, void * * arg_18) {
    eax = [self allocWithZone:0x0];
    eax = [eax initByResolvingBookmarkData:arg_8 options:arg_C relativeToURL:arg_10 bookmarkDataIsStale:arg_14 error:arg_18];
    eax = [eax autorelease];
    return eax;
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/c089771fd8196f449662.js?file=03_snip.m&quot;&gt; &lt;/script&gt;

&lt;p&gt;A quick inspection shows this to be a wrapper around &lt;code class=&quot;highlighter-rouge&quot;&gt;initByResolvingBookmarkData&lt;/code&gt;, on with the hunt!&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;edi = CFURLCreateByResolvingBookmarkData(*_kCFAllocatorDefault, arg_8, arg_C, edi, 0x0, arg_14, arg_18);
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/c089771fd8196f449662.js?file=04_snip.c&quot;&gt; &lt;/script&gt;

&lt;p&gt;That CF looks like we‚Äôre skipping on over to &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreFoundation.framework&lt;/code&gt;.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;int _CFURLCreateByResolvingBookmarkData(int arg0, int arg1, int arg2, int arg3, int arg4, int arg5) {  
    r9 = arg5;  
    r15 = arg4;  
    r12 = arg3;  
    r13 = arg2;  
    rbx = arg1;  
    r14 = arg0;  
    rax = *___CFCoreServicesInternal__CFURLCreateByResolvingBookmarkData.dyfunc;  
    if (rax == 0xff) {  
            rax = ___CFLookupCoreServicesInternalFunction(&amp;quot;_CFURLCreateByResolvingBookmarkData&amp;quot;);  
            *___CFCoreServicesInternal__CFURLCreateByResolvingBookmarkData.dyfunc = rax;  
    }&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/c089771fd8196f449662.js?file=05_snip.c&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;strong&gt;Ruh roh!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This function isn‚Äôt defined here, it‚Äôs apparently a ‚ÄúCFCoreServicesInternal‚Äù bit of code. Now where could that be defined? ‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶ Let‚Äôs check our good friends over at &lt;code class=&quot;highlighter-rouge&quot;&gt;/System/Library/PrivateFrameworks&lt;/code&gt; üòÜ&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Oh my&lt;/em&gt;, there appears to be a &lt;code class=&quot;highlighter-rouge&quot;&gt;CoreServicesInternal.framework&lt;/code&gt; there!&lt;/p&gt;

&lt;p&gt;Imagine my surprise.&lt;/p&gt;

&lt;p&gt;Let‚Äôs look inside.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-24-apples-bookmarkdata-exposed/BookmarkData1.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Wow.&lt;/strong&gt; This looks like the place to be!&lt;/p&gt;

&lt;p&gt;While we‚Äôre here, let‚Äôs take a glance at all the internal things Apple does with BookmarkData ‚Ä¶&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-24-apples-bookmarkdata-exposed/BookmarkData2.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;OH &lt;em&gt;HELLLLLLOOoo‚Ä¶ what do we have here???&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;returnAllPropertiesInBookmark&lt;/code&gt;, &lt;code class=&quot;highlighter-rouge&quot;&gt;returnAllPropertyKeysInBookmark&lt;/code&gt;, and &lt;code class=&quot;highlighter-rouge&quot;&gt;returnDetailedDump&lt;/code&gt; you say? &lt;em&gt;Fascinating&lt;/em&gt; function names.&lt;/p&gt;

&lt;p&gt;Visiting any one of those functions, I‚Äôm extremely curious to see how they get &lt;strong&gt;called&lt;/strong&gt;. So we use Hopper‚Äôs helpful ‚ÄúShow Places Calling This Procedure‚Ä¶‚Äù and all 3 take us to &lt;code class=&quot;highlighter-rouge&quot;&gt;BookmarkResourcePropertyKeyToInfoStructInit()&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-24-apples-bookmarkdata-exposed/BookmarkData3.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;üò± üò≠ üò±&lt;/p&gt;

&lt;p&gt;&lt;em&gt;Do my eyes deceive me?&lt;/em&gt; Are these &lt;strong&gt;secret undocumented NSURL&lt;/strong&gt; &lt;code class=&quot;highlighter-rouge&quot;&gt;resourceValuesForKeys:&lt;/code&gt; keys !??!&lt;/p&gt;

&lt;p&gt;They sure as hell look like it! Let‚Äôs try ‚Äòem out!!&lt;/p&gt;

&lt;p&gt;How about we try &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURLBookmarkAllPropertiesKey&lt;/code&gt;, first?&lt;/p&gt;

&lt;p&gt;&lt;small&gt;&lt;em&gt;(*insert magical handwaving, skipping over the boring part to get to the amazing part*)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; NSURL.resourceValuesForKeys_fromBookmarkData_([&amp;#39;NSURLBookmarkAllPropertiesKey&amp;#39;], some_bookmark_data)

{
    NSURLBookmarkAllPropertiesKey =     {
        NSURLBookmarkOriginalRelativePathComponentsArrayKey =         (
            Volumes,
            &amp;quot;shares-1&amp;quot;
        );
        NSURLBookmarkOriginalRelativePathKey = &amp;quot;&amp;quot;;
        NSURLBookmarkOriginalVolumeNameKey = &amp;quot;shares-1&amp;quot;;
        NSURLCreationDateKey = &amp;quot;2014-04-07 14:41:38 +0000&amp;quot;;
        NSURLIsDirectoryKey = 1;
        NSURLIsPackageKey = 0;
        NSURLIsRegularFileKey = 0;
        NSURLIsSymbolicLinkKey = 0;
        NSURLIsVolumeKey = 1;
        NSURLLocalizedNameKey = shares;
        NSURLNameKey = &amp;quot;shares-1&amp;quot;;
        NSURLVolumeCreationDateKey = &amp;quot;2014-04-07 14:41:38 +0000&amp;quot;;
        NSURLVolumeIsAutomountedKey = 0;
        NSURLVolumeIsBrowsableKey = 1;
        NSURLVolumeIsEjectableKey = 0;
        NSURLVolumeIsInternalKey = 0;
        NSURLVolumeIsLocalKey = 0;
        NSURLVolumeIsReadOnlyKey = 0;
        NSURLVolumeIsRemovableKey = 0;
        NSURLVolumeNameKey = &amp;quot;shares-1&amp;quot;;
        NSURLVolumeSupportsPersistentIDsKey = 1;
        NSURLVolumeTotalCapacityKey = 249199591424;
        NSURLVolumeURLKey = &amp;quot;file:///Volumes/shares-1/&amp;quot;;
        &amp;quot;_NSURLBookmarkSecurityScopeCryptoKeyKey&amp;quot; = &amp;lt;00000000 00000000 00000000 00000000 00000000 00000000 00000000 00000000&amp;gt;;
        &amp;quot;_NSURLFileIDKey&amp;quot; = 2;
        &amp;quot;_NSURLPathKey&amp;quot; = &amp;quot;/Volumes/shares-1&amp;quot;;
        &amp;quot;_NSURLTypeBindingKey&amp;quot; = &amp;lt;646e6962 00000000 09000000 00000000 00000000 00000000 00000000 72767273 00000000 00000000 00000000 00000000&amp;gt;;
        &amp;quot;_NSURLVolumeDontBrowseKey&amp;quot; = 0;
        &amp;quot;_NSURLVolumeIsDiskImageKey&amp;quot; = 0;
        &amp;quot;_NSURLVolumeIsExternalKey&amp;quot; = 0;
        &amp;quot;_NSURLVolumeIsiPodKey&amp;quot; = 0;
    };
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/c089771fd8196f449662.js?file=06_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Good god. It worked. It‚Äôs &lt;em&gt;all&lt;/em&gt; there.&lt;/p&gt;

&lt;p&gt;All the keys Apple lists - and &lt;strong&gt;a ton that they don‚Äôt&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;‚Ä¶ and yet ‚Ä¶ none of them are what I‚Äôm looking for: just the plain URL to the share.&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;NSURLBookmarkAllPropertyKeysKey&lt;/code&gt; turns out to be a bit of a repeat, listing only the keys (but without values).&lt;/p&gt;

&lt;p&gt;Want to guess what &lt;code class=&quot;highlighter-rouge&quot;&gt;NSURLBookmarkDetailedDescription&lt;/code&gt; does?&lt;/p&gt;

&lt;p&gt;It &lt;span style=&quot;color:red&quot;&gt;knocked my socks off&lt;/span&gt;, that‚Äôs what it does.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;Bookmark: dataRef=0x106672000 len=1229264
  signature = 0x6b6f6f62
  length = 0x12c1d0
  version = 0x10040000
  bookmarkDataSectionOffset = 0x30
  bookmarkDataSectionFirstTOCOffset = 0x12c0b4
 0x00000:626f6f6b d0c11200 00000410 30000000   | book .... .... 0...  
 0x00010:00000000 00000000 00000000 00000000   | .... .... .... ....  
 0x00020:00000000 00000000 00000000 00000000   | .... .... .... ....  
 0x00030:b4c01200 04000000 03030000 00040000   | .... .... .... ....  
 0x00040:07000000 01010000 566f6c75 6d657300   | .... .... Volu mes.  
 0x00050:08000000 01010000 73686172 65732d31   | .... .... shar es-1  
[... snipped ...]
 scopeCrytoKey = &amp;lt;CFData 0x7fb2b1690ba0 [0x7fff767fbed0]&amp;gt;{length = 32, capacity = 32, bytes = 0x00000000000000000000000000000000 ... 0000000000000000}
 toc @ offset:0x12c0e4 ( 0x0x10679e0e4 ) level=1 count=18 next=0x476
   0) itemType=0x1004 flags=0x0 dataOffset=0x60 pathComponents:[ &amp;quot;Volumes&amp;quot;, &amp;quot;shares-1&amp;quot;]  
   1) itemType=0x1005 flags=0x0 dataOffset=0x90 fileIDs:[  13686/0x3576 ,  2/0x2 ]  
   2) itemType=0x1010 flags=0x0 dataOffset=0xb0 resourceProps:Props:[!file** dir** !sym** vol** !pkg** !app** ] 
   3) itemType=0x1040 flags=0x0 dataOffset=0xa0 creationDate: 2014/04/07 14:41:38.0000  
   4) itemType=0x2000 flags=0x0 dataOffset=0x298 volInfoDepths:[  61440/0xf000 ,  0/0x0 ,  1/0x1 ]  
   5) itemType=0x2002 flags=0x0 dataOffset=0x12c volPath:&amp;quot;/Volumes/shares-1&amp;quot; 
   6) itemType=0x2005 flags=0x0 dataOffset=0xd8 volURL:&amp;quot;&amp;lt;CFURL 0x7fb2b1670e40 [0x7fff767fbed0]&amp;gt;{string = file:///Volumes/shares-1/, encoding = 134217984, base = (null)}&amp;quot; 
[... snipped ...]
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/c089771fd8196f449662.js?file=07_snip.txt&quot;&gt; &lt;/script&gt;

&lt;p&gt;I‚Äôve clipped bits out here, but it‚Äôs a &lt;strong&gt;programmer‚Äôs debug output&lt;/strong&gt; for the entire BookmarkData structure, giving all of the offset values within the data and breaking down &lt;em&gt;what‚Äôs actually contained in it&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Simply amazing. Everything I could have asked for.&lt;/p&gt;

&lt;p&gt;The URL of the share itself shows up like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;11) itemType=0x2050 flags=0x0 dataOffset=0x148 volMountURL:&quot;&amp;lt;CFURL 0x7fb2b1691d30 [0x7fff767fbed0]&amp;gt;{string = smb://username@192.168.0.1/shares, encoding = 134217984, base = (null)}&quot;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;With the information this undocumented debug output provides, I was able to determine the entire structure of the BookmarkData format, which I‚Äôll now document here üòÑ&lt;/p&gt;

&lt;h2 id=&quot;the-bookmarkdata-structure&quot;&gt;The BookmarkData Structure&lt;/h2&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-24-apples-bookmarkdata-exposed/BookmarkExample.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Here we‚Äôll go over this simple 260 byte version of a BookmarkData structure which contains only a single TOC with a single data record. The details I give here were collected after looking at quite a few samples.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: Unless specified otherwise, all integers are unsigned and little endian)&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;bookmarkdata-header&quot;&gt;BookmarkData Header&lt;/h3&gt;

&lt;p&gt;&lt;em&gt;(all examples appeared to be 48 bytes in length)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-24-apples-bookmarkdata-exposed/Structure_01_Header.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;‚ñ†&lt;/span&gt; 4 byte string: &lt;strong&gt;BookmarkData signature&lt;/strong&gt; (can be &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt;, the new style, or &lt;code class=&quot;highlighter-rouge&quot;&gt;alis&lt;/code&gt;, the original alias record of Mac OS)&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:lightgreen&quot;&gt;‚ñ†&lt;/span&gt; 32-bit integer: &lt;strong&gt;Total length of BookmarkData&lt;/strong&gt; structure (including header)&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;‚ñ†&lt;/span&gt; 4 bytes: &lt;strong&gt;Version&lt;/strong&gt; &lt;em&gt;(might be a big endian int&lt;/em&gt;? &lt;code class=&quot;highlighter-rouge&quot;&gt;1040&lt;/code&gt;&lt;em&gt;)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:yellow&quot;&gt;‚ñ†&lt;/span&gt; 32-bit integer: &lt;strong&gt;Offset of BookmarkData data&lt;/strong&gt; payload from beginning of BookmarkData structure (always &lt;code class=&quot;highlighter-rouge&quot;&gt;48&lt;/code&gt; currently)&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;‚ñ†&lt;/span&gt; N-bytes: null / &lt;code class=&quot;highlighter-rouge&quot;&gt;0x00&lt;/code&gt; bytes used as &lt;strong&gt;filler&lt;/strong&gt; until the beginning of BookmarkData data payload&lt;/p&gt;

&lt;h3 id=&quot;bookmarkdata-data&quot;&gt;BookmarkData Data&lt;/h3&gt;

&lt;p&gt;The data portion is a combination of several things: TOC (table of contents) records, data records (of various kinds), and most importantly the pointer to the first TOC. The ‚ÄúOffset of BookmarkData data‚Äù value points to the beginning of this data structure.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-24-apples-bookmarkdata-exposed/Structure_02_Data.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:orange&quot;&gt;‚ñ†&lt;/span&gt; 32-bit integer: &lt;strong&gt;Offset of first TOC&lt;/strong&gt;, measured from the start of the BookmarkData data payload (example: an offset of &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt; is actually &lt;code class=&quot;highlighter-rouge&quot;&gt;148&lt;/code&gt; bytes from the beginning. &lt;code class=&quot;highlighter-rouge&quot;&gt;48&lt;/code&gt; byte header + &lt;code class=&quot;highlighter-rouge&quot;&gt;100&lt;/code&gt; bytes from start of data payload)&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:lightgray&quot;&gt;‚ñ†&lt;/span&gt; N-bytes: The remainder of the data section is composed of TOC records (which tell where to find the data records) and the data records themselves.&lt;/p&gt;

&lt;h3 id=&quot;bookmarkdata-toc&quot;&gt;BookmarkData TOC&lt;/h3&gt;

&lt;p&gt;BookmarkData has the concept of a ‚Äúfirst TOC‚Äù, the one pointed to by the beginning of the BookmarkData data payload. Each TOC has information about a number of data records as well as information on the offset of the ‚Äúnext TOC‚Äù. If there is no next TOC, the offset for ‚Äúnext TOC‚Äù will be 0. Each TOC is comprised of a header and a data section.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-24-apples-bookmarkdata-exposed/Structure_03_TOC.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;h3 id=&quot;toc-header&quot;&gt;TOC Header&lt;/h3&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;‚ñ†&lt;/span&gt; 32-bit integer: &lt;strong&gt;Length of TOC data&lt;/strong&gt; segment after the header&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:lightgreen&quot;&gt;‚ñ†&lt;/span&gt; 16-bit integer: &lt;strong&gt;Record type (TOC)&lt;/strong&gt; (&lt;code class=&quot;highlighter-rouge&quot;&gt;0xFEFF&lt;/code&gt; / &lt;code class=&quot;highlighter-rouge&quot;&gt;65279&lt;/code&gt;. Might be signed? In which case the value would be &lt;code class=&quot;highlighter-rouge&quot;&gt;-2&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;‚ñ†&lt;/span&gt; 16-bit integer: &lt;strong&gt;Flags&lt;/strong&gt; (unused for TOC, always set to &lt;code class=&quot;highlighter-rouge&quot;&gt;0xFFFF&lt;/code&gt;)&lt;/p&gt;

&lt;h3 id=&quot;toc-data&quot;&gt;TOC Data&lt;/h3&gt;

&lt;p&gt;&lt;span style=&quot;color:yellow&quot;&gt;‚ñ†&lt;/span&gt; 32-bit integer: &lt;strong&gt;Level&lt;/strong&gt; (for a server mount, the value seems to be &lt;code class=&quot;highlighter-rouge&quot;&gt;1&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:cyan&quot;&gt;‚ñ†&lt;/span&gt; 32-bit integer: &lt;strong&gt;Offset of next TOC&lt;/strong&gt; record, measured from beginning of BookmarkData data section&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:magenta&quot;&gt;‚ñ†&lt;/span&gt; 32-bit integer: &lt;strong&gt;Number of records&lt;/strong&gt; in this TOC&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[BEGIN: N number of TOC data records]&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;toc-data-record&quot;&gt;TOC Data Record&lt;/h3&gt;

&lt;p&gt;&lt;span style=&quot;color:orange&quot;&gt;‚ñ†&lt;/span&gt; 16-bit integer: &lt;strong&gt;Record type&lt;/strong&gt; - varies (examples: &lt;code class=&quot;highlighter-rouge&quot;&gt;8272&lt;/code&gt;: ‚ÄúvolMountURL‚Äù, &lt;code class=&quot;highlighter-rouge&quot;&gt;8208&lt;/code&gt;: ‚ÄúvolName‚Äù)&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:salmon&quot;&gt;‚ñ†&lt;/span&gt; 16-bit integer: &lt;strong&gt;Flags&lt;/strong&gt; (always seems to be &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0000&lt;/code&gt;)&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:lightblue&quot;&gt;‚ñ†&lt;/span&gt; 64-bit integer: &lt;strong&gt;Offset of record data&lt;/strong&gt;, measured from beginning of BookmarkData data portion&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(Note: That may actually be a 32-bit integer, followed by 4 null bytes - I would be surprised to see 64-bit offsets here when TOC offsets are 32-bit)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;[END TOC data records]&lt;/em&gt;&lt;/p&gt;

&lt;h3 id=&quot;standard-data-record&quot;&gt;Standard Data Record&lt;/h3&gt;

&lt;p&gt;These are the records pointed to by TOCs. They represent the bulk of the contents of BookmarkData and are where the real data is stored.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-24-apples-bookmarkdata-exposed/Structure_04_Records.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:red&quot;&gt;‚ñ†&lt;/span&gt; 32-bit integer: &lt;strong&gt;Length of data&lt;/strong&gt; payload, the actual data stored here&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:blue&quot;&gt;‚ñ†&lt;/span&gt; 32-bit integer: &lt;strong&gt;Data type&lt;/strong&gt; - varies (examples: &lt;code class=&quot;highlighter-rouge&quot;&gt;2305&lt;/code&gt;: CFURL, &lt;code class=&quot;highlighter-rouge&quot;&gt;257&lt;/code&gt;: string)&lt;/p&gt;

&lt;p&gt;&lt;span style=&quot;color:lightgreen&quot;&gt;‚ñ†&lt;/span&gt; N-bytes: &lt;strong&gt;Record data&lt;/strong&gt;, padded with &lt;code class=&quot;highlighter-rouge&quot;&gt;0x00&lt;/code&gt; on the end if necessary to reach a multiple of 4 bytes in length&lt;/p&gt;

&lt;p&gt;(‚Ä¶ wow, you made it this far? Yay! üéâ)&lt;/p&gt;

&lt;p&gt;Some of you readers with a keen eye may have recognized the data coloring abilities of &lt;a href=&quot;http://www.synalysis.net&quot;&gt;Synalyze It!&lt;/a&gt; and maybe you‚Äôre secretly hoping I‚Äôve written up a formal grammar for BookmarkData using it ‚Ä¶ sadly I have not üòû. I‚Äôm brand new to the software and unfortunately the interface is not very intuitive when it comes to interactively creating a new grammar. I haven‚Äôt decided yet whether I‚Äôm to blame or poor UI is.&lt;/p&gt;

&lt;p&gt;‚Ä¶ The &lt;em&gt;even sharper&lt;/em&gt; readers which have persisted this far may have noticed that the standard data record in my example doesn‚Äôt appear to be something you can easily extract a share URL from. There‚Äôs a reason for that!&lt;/p&gt;

&lt;p&gt;I picked the older &lt;code class=&quot;highlighter-rouge&quot;&gt;alis&lt;/code&gt; BookmarkData structure as an example because of its size (260 bytes for this one). Your average &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; modern style BookmarkData structure is well over a megabyte in size (!) because one of the records it contains is &lt;code class=&quot;highlighter-rouge&quot;&gt;icns&lt;/code&gt; icon information for how your share‚Äôs icon should look.&lt;/p&gt;

&lt;p&gt;Unfortunately, the &lt;code class=&quot;highlighter-rouge&quot;&gt;alis&lt;/code&gt;-style is literally the thinnest of wrappers around what‚Äôs actually an original Mac OS (pre OS X) &lt;code class=&quot;highlighter-rouge&quot;&gt;alis&lt;/code&gt; resource fork fileshare record.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-10-24-apples-bookmarkdata-exposed/ResEdit.gif&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;The newer &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; variant contains the record types (like &lt;code class=&quot;highlighter-rouge&quot;&gt;8272&lt;/code&gt; aka ‚ÄúvolMountURL‚Äù) I mentioned earlier.&lt;/p&gt;

&lt;p&gt;So - what to do?&lt;/p&gt;

&lt;p&gt;Well. 
Back to Where We Started
‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî‚Äî&lt;/p&gt;

&lt;p&gt;If you have records that are &lt;code class=&quot;highlighter-rouge&quot;&gt;book&lt;/code&gt; type, &lt;a href=&quot;https://gist.github.com/pudquick/4776b4b2075bf9b7e512&quot;&gt;I have posted quick and dirty code here&lt;/a&gt; that will give you the ‚ÄúvolMountURL‚Äù information instantly for the &lt;code class=&quot;highlighter-rouge&quot;&gt;.sfl&lt;/code&gt; files that started this wild ride.&lt;/p&gt;

&lt;p&gt;I‚Äôm working on more formal code for BookmarkData parsing as I write this. But now that the information is out there, maybe someone will beat me to the punch üòä&lt;/p&gt;

&lt;p&gt;If you have &lt;code class=&quot;highlighter-rouge&quot;&gt;alis&lt;/code&gt;-style information, you can can attempt to use code like this:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;url,isStale,err = NSURL.URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error_(bookmark_data, NSURLBookmarkResolutionWithoutMounting+NSURLBookmarkResolutionWithoutUI, None, None, None)&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶ But don‚Äôt be surprised if you get back results like this if the resource no longer exists:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;&amp;gt;&amp;gt;&amp;gt; url is None
True
&amp;gt;&amp;gt;&amp;gt; isStale
False
&amp;gt;&amp;gt;&amp;gt; print err.__repr__()
Error Domain=NSOSStatusErrorDomain Code=-43 &amp;quot;The operation couldn‚Äôt be completed. (OSStatus error -43.)&amp;quot; (fnfErr: File not found)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/c089771fd8196f449662.js?file=08_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;But worry not, friend readers - I‚Äôve &lt;em&gt;also&lt;/em&gt; completely decoded &lt;code class=&quot;highlighter-rouge&quot;&gt;alis&lt;/code&gt; records in python, &lt;a href=&quot;https://bitbucket.org/al45tair/mac_alias&quot;&gt;as have others&lt;/a&gt;!&lt;/p&gt;

&lt;p&gt;And the AFPX mount records they can contain.&lt;/p&gt;

&lt;p&gt;And even resource forks!&lt;/p&gt;

&lt;p&gt;We‚Äôll get to it in another blog post üòÜ&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- mike&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 24 Oct 2015 09:00:00 -0700</pubDate>
        <link>http://michaellynn.github.io/2015/10/24/apples-bookmarkdata-exposed/</link>
        <guid isPermaLink="true">http://michaellynn.github.io/2015/10/24/apples-bookmarkdata-exposed/</guid>
      </item>
    
      <item>
        <title>Even More Oracle Java Compatibility (Minecraft!)</title>
        <description>&lt;p&gt;&lt;a href=&quot;https://twitter.com/rtrouton&quot;&gt;Rich Trouton&lt;/a&gt; kindly wrote &lt;a href=&quot;https://derflounder.wordpress.com/2015/08/08/modifying-oracles-java-sdk-to-run-java-applications-on-os-x/&quot;&gt;a wonderful blog post&lt;/a&gt; covering &lt;a href=&quot;https://gist.github.com/pudquick/349f063c242239952a2e/64c295fc4576d7df9b8632e6ddecbe6165fd7663&quot;&gt;a python script of mine&lt;/a&gt; (&lt;em&gt;note: this is the old version, don‚Äôt use it!&lt;/em&gt;) which modifies installations of Oracle‚Äôs Java JDK to extend its capabilities to allow it to run JavaApplicationStub .app bundles as was &lt;a href=&quot;https://forums.developer.apple.com/message/6741&quot;&gt;discussed&lt;/a&gt; on Apple‚Äôs Developer forums (go ahead and read it, Apple has made the forum open to the public for now).&lt;/p&gt;

&lt;p&gt;One thing that annoyed me a bit about the fix though was that it didn‚Äôt seem to work with &lt;em&gt;everything&lt;/em&gt; (read: &lt;a href=&quot;http://minecraft.net/&quot;&gt;Minecraft&lt;/a&gt;), just a large number of Java .apps.&lt;/p&gt;

&lt;p&gt;After it was posted, a Twitter friend of mine &lt;a href=&quot;https://twitter.com/morningwoodspor/status/630886277538258945&quot;&gt;asked for a little more help&lt;/a&gt; with one of these more problematic apps.&lt;/p&gt;

&lt;p&gt;I was able to confirm that the app in question could run if I provided the right arguments to &lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/java&lt;/code&gt;, so why couldn‚Äôt JavaApplicationStub launching work?&lt;/p&gt;

&lt;p&gt;A little more research (aka Google) turned up &lt;a href=&quot;http://apple.stackexchange.com/a/136976&quot;&gt;this marvelous additional tidbit&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Basically the problematic Java .apps in question had their .jar files coded to look for &lt;code class=&quot;highlighter-rouge&quot;&gt;libserver.dylib&lt;/code&gt;, which isn‚Äôt part of the current JDK distribution.&lt;/p&gt;

&lt;p&gt;This fix involves creating the original directory structure it expects it at and symlinking &lt;code class=&quot;highlighter-rouge&quot;&gt;libjvm.dylib&lt;/code&gt; to the old location.&lt;/p&gt;

&lt;p&gt;It worked, it fixed the launching! (&lt;strong&gt;&lt;em&gt;and Minecraft works as-is for me now, no more modifying the .app bundle!!&lt;/em&gt;&lt;/strong&gt;)&lt;/p&gt;

&lt;p&gt;I‚Äôve since &lt;a href=&quot;https://gist.github.com/pudquick/349f063c242239952a2e&quot;&gt;updated the original code&lt;/a&gt;, so that both Rich‚Äôs blog post and this one here provide an all-in-one solution.&lt;/p&gt;

&lt;p&gt;As always, hope this helps you üòÑ&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;#!/usr/bin/python
import plistlib, os.path, os

# Based off of https://forums.developer.apple.com/message/6741
#          and http://apple.stackexchange.com/a/136976

def jdk_info_plists():
    # Find all the JDK Info.plist files
    JDK_ROOT = &amp;quot;/Library/Java/JavaVirtualMachines&amp;quot;
    if (os.path.exists(JDK_ROOT) and os.path.isdir(JDK_ROOT)):
        # It&amp;#39;s present, let&amp;#39;s look for installs
        for file in os.listdir(JDK_ROOT):
            jdk_dir = os.path.join(JDK_ROOT, file)
            if (os.path.isdir(jdk_dir)):
                # Check for Info.plist
                info_plist = os.path.join(jdk_dir, &amp;quot;Contents&amp;quot;, &amp;quot;Info.plist&amp;quot;)
                if (os.path.isfile(info_plist)):
                    yield info_plist

for info_plist in jdk_info_plists():
    # Change all the plists of all the installed JDKs
    info = plistlib.readPlist(info_plist)
    # Convert the capabilities into a set
    capabilities = set(info[&amp;#39;JavaVM&amp;#39;][&amp;#39;JVMCapabilities&amp;#39;])
    capabilities.add(&amp;#39;JNI&amp;#39;)
    capabilities.add(&amp;#39;BundledApp&amp;#39;)
    # Update our changes
    info[&amp;#39;JavaVM&amp;#39;][&amp;#39;JVMCapabilities&amp;#39;] = sorted(capabilities)
    # Write back our changes
    plistlib.writePlist(info, info_plist)
    # Create a symlink to fix legacy applications
    # Find the Contents directory
    contents_path = os.path.dirname(info_plist)
    # make the bundle/Libraries subpath
    bundle_libraries = os.path.join(contents_path, &amp;quot;Home&amp;quot;, &amp;quot;bundle&amp;quot;, &amp;quot;Libraries&amp;quot;)
    try:
        # Just in case you run this script multiple times, we&amp;#39;ll fail if the directory already exists
        os.makedirs(os.path.join(bundle_libraries))
    except:
        pass
    # create the symlink between libjvm.dylib and libserver.dylib
    libjvm_dylib = os.path.join(contents_path, &amp;quot;Home&amp;quot;, &amp;quot;jre&amp;quot;, &amp;quot;lib&amp;quot;, &amp;quot;server&amp;quot;, &amp;quot;libjvm.dylib&amp;quot;)
    libserver_dylib = os.path.join(bundle_libraries, &amp;quot;libserver.dylib&amp;quot;)
    try:
        # Just in case you run this script multiple times, we&amp;#39;ll fail if the file already exists
        os.symlink(libjvm_dylib, libserver_dylib)
    except:
        pass
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/349f063c242239952a2e.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;&lt;em&gt;- mike&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Mon, 10 Aug 2015 18:15:00 -0700</pubDate>
        <link>http://michaellynn.github.io/2015/08/10/even-more-oracle-java-compatibility/</link>
        <guid isPermaLink="true">http://michaellynn.github.io/2015/08/10/even-more-oracle-java-compatibility/</guid>
      </item>
    
      <item>
        <title>Learn you a better pyobjc Bridgesupport signature</title>
        <description>&lt;p&gt;This blog post is about correcting function signatures in pyobjc.&lt;/p&gt;

&lt;p&gt;This blog post has a backstory.&lt;/p&gt;

&lt;p&gt;Recently I received a challenge that was posed by &lt;a href=&quot;https://twitter.com/shea_craig&quot;&gt;Shea Craig&lt;/a&gt; to me on the &lt;a href=&quot;http://macadmins.org&quot;&gt;Macadmins Slack&lt;/a&gt; in the &lt;strong&gt;#autopkg&lt;/strong&gt; channel:&lt;/p&gt;

&lt;blockquote&gt;
  &lt;p&gt;@sheagcraig: Also, it‚Äôs possible that we could try to do a mount via PyObjC stuff (paging @frogor)&lt;/p&gt;
&lt;/blockquote&gt;

&lt;p&gt;&lt;em&gt;&lt;small&gt;*(frogor is one of my &lt;a href=&quot;/about&quot;&gt;many names&lt;/a&gt;)&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In the discussion, a few people were wondering if it was possible to mount network shares with python in OS X (&lt;em&gt;of course it is&lt;/em&gt;) because using the command-line &lt;code class=&quot;highlighter-rouge&quot;&gt;mount&lt;/code&gt; was running into some odd situations with Kerberos ticket handling.&lt;/p&gt;

&lt;p&gt;You could call out to AppleScript (&lt;code class=&quot;highlighter-rouge&quot;&gt;osascript&lt;/code&gt;) to do it with ‚Äúmount volume‚Äù, but the rest of the code involved was already written in python and there was interest in reducing the number of external tools used rather than replacing one with another.&lt;/p&gt;

&lt;p&gt;This sounded like a fun challenge!&lt;/p&gt;

&lt;p&gt;So the first thing I did was pop open the relevant AppleScript code in &lt;a href=&quot;http://hopperapp.com&quot;&gt;Hopper&lt;/a&gt;. In this instance, that particular code is located in the bundle: /System/Library/ScriptingAdditions/StandardAdditions.osax&lt;/p&gt;

&lt;p&gt;How did I find that, you might ask?&lt;/p&gt;

&lt;p&gt;Unless you‚Äôre using AppleScript to speak to a particular application that has its own custom commands (aka dictionary), the built-in commands for AppleScript that aren‚Äôt just part of the AppleScript language itself are mostly stored in the ‚ÄúStandard Additions‚Äù scripting addition.&lt;/p&gt;

&lt;p&gt;If you open up Script Editor and select &lt;em&gt;File -&amp;gt; Open Dictionary‚Ä¶&lt;/em&gt; and select StandardAdditions.osax, you can see the ‚Äúmount volume‚Äù command and its associated documentation.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-08-08-learn-you-a-better-pyobjc-bridgesupport-signature/StandardAdditions.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Opening the executable in Hopper, unfortunately you can‚Äôt just search for ‚Äúmount volume‚Äù and find the relevant code. This is because AppleScript additions have a translation layer called a &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ScriptableCocoaApplications/SApps_creating_sdef/SAppsCreateSdef.html&quot;&gt;Scripting Definition File&lt;/a&gt; that maps the AppleScript language syntax to the code behind it.&lt;/p&gt;

&lt;p&gt;Inside the ‚ÄúStandardAdditions.osax‚Äù bundle, within /Contents/Resources you‚Äôll find the ‚ÄúStandardAdditions.sdef‚Äù scripting definition file and the relevant definition line within it:&lt;/p&gt;

&lt;div class=&quot;language-xml highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nt&quot;&gt;&amp;lt;command&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;name=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;mount volume&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;code=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;aevtmvol&quot;&lt;/span&gt; &lt;span class=&quot;na&quot;&gt;description=&lt;/span&gt;&lt;span class=&quot;s&quot;&gt;&quot;Mount the specified server volume&quot;&lt;/span&gt;&lt;span class=&quot;nt&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Searching in Hopper for ‚Äúaevtmvol‚Äù reveals the function ‚Äú_AEVTaevtmvol‚Äù, which has this bit of pseudocode:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;eax = NetFSMountURLSync(var_38, 0x0, 0x0, 0x0, var_3C, esi, var_10);
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;That looks promising!&lt;/p&gt;

&lt;p&gt;A Google search turns up documentation for this function via a note from Apple within the &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Carbon/Reference/File_Manager/#//apple_ref/c/func/FSMountServerVolumeSync&quot;&gt;File Manager legacy reference for FSMountServerVolumeSync&lt;/a&gt; (&lt;em&gt;careful loading this page, &lt;strong&gt;tons&lt;/strong&gt; of Javascript&lt;/em&gt;), where it says:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúTo mount local volumes and to eject and unmount all volumes, use Disk Arbitration API instead (for more information, see Disk Arbitration Framework Reference). To mount a network volume, use NetFSMountURLAsync instead (to cancel a pending mount request, use NetFSMountURLCancel). &lt;strong&gt;For more information, see NetFS.h in /System/Library/Frameworks/NetFS.framework/Headers&lt;/strong&gt;.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;&lt;small&gt;*(yes, it says NetFSMountURLAsync not NetFSMountURLsync, but just bear with me)&lt;/small&gt;&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, cool. Time to go look at some headers.&lt;/p&gt;

&lt;p&gt;Within the file mentioned above, we find:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;int
NetFSMountURLSync(
	CFURLRef url,                           // URL to mount, e.g. nfs://server/path
	CFURLRef mountpath,                     // Path for the mountpoint
	CFStringRef user,                       // Auth user name (overrides URL)
	CFStringRef passwd,                     // Auth password (overrides URL)
	CFMutableDictionaryRef open_options,    // Options for session open (see below)
	CFMutableDictionaryRef mount_options,   // Options for mounting (see below)
	CFArrayRef *mountpoints)                // Array of mountpoints&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/8f09a0b8893c01637b74.js?file=01_snip.c&quot;&gt; &lt;/script&gt;

&lt;p&gt;That‚Äôs a bingo.&lt;/p&gt;

&lt;p&gt;Looking at the pseudocode, &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0&lt;/code&gt; (null pointer) is used in place of the user and password arguments which lines right up with the documentation &lt;em&gt;‚Äú(overrides URL)‚Äù&lt;/em&gt; indicating that as long as someone provides the password within the URL (example: &lt;code class=&quot;highlighter-rouge&quot;&gt;afp://username:password@server/share&lt;/code&gt;), then they‚Äôre unnecessary.&lt;/p&gt;

&lt;p&gt;The only arguments AppleScript passes are &lt;em&gt;url&lt;/em&gt;, &lt;em&gt;open_options&lt;/em&gt;, &lt;em&gt;mount_options&lt;/em&gt;, and a placeholder for getting the returned mountpoint after it succeeds.&lt;/p&gt;

&lt;p&gt;So let‚Äôs look at &lt;em&gt;open_options&lt;/em&gt; and &lt;em&gt;mount_options&lt;/em&gt; to see what AppleScript put in them.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-asm&quot;&gt;00014a1b         lea        eax, dword [ds:eax-0x14621+cfstring_AllowSubMounts] ; @&quot;AllowSubMounts&quot;
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;From the same NetFS.h file above, we can find out what this means:&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;* kNetFSAllowSubMountsKey = true        Allow a mount from a dir beneath the share point.
#define kNetFSAllowSubMountsKey         CFSTR(&quot;AllowSubMounts&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Allowing mounting subdirectories sounds like an important setting. Are there any other good ones in there?&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;* kNAUIOptionKey = UIOption             Suppress authentication dialog UI.
#define kNAUIOptionKey                  CFSTR(&quot;UIOption&quot;)
// UIOption values                      CFStringRef
#define kNAUIOptionNoUI                 CFSTR(&quot;NoUI&quot;)
#define kNAUIOptionAllowUI              CFSTR(&quot;AllowUI&quot;)
#define kNAUIOptionForceUI              CFSTR(&quot;ForceUI&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Useful!&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-C&quot;&gt;* kNetFSMountAtMountDirKey = true       Mount on the specified mountpath instead of below it.
#define kNetFSMountAtMountDirKey        CFSTR(&quot;MountAtMountDir&quot;)
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;Could come in handy!&lt;/p&gt;

&lt;p&gt;It‚Äôs also interesting to note that the AppleScript code provides &lt;code class=&quot;highlighter-rouge&quot;&gt;0x0&lt;/code&gt; for mountpath, which seems to imply that not defining it will make it mount in the standard dynamic fashion at /Volumes.&lt;/p&gt;

&lt;p&gt;So at what point do we start turning this into python code?&lt;/p&gt;

&lt;p&gt;‚Ä¶ How about now? üòÜ&lt;/p&gt;

&lt;p&gt;If you‚Äôve not dealt with a lot of pyobjc, I feel a little concern as to why you‚Äôre reading my blog since &lt;a href=&quot;/tag/python&quot;&gt;that‚Äôs mostly what I write about&lt;/a&gt;. But if you do find yourself in this boat, I can point you to two wonderful writeups about it written by the venerable &lt;a href=&quot;http://twitter.com/gregneagle/&quot;&gt;Greg Neagle&lt;/a&gt;: &lt;strong&gt;&lt;a href=&quot;https://managingosx.wordpress.com/2015/02/02/command-line-tools-via-python-and-cocoa/&quot;&gt;Command-line Tools via Python and Cocoa&lt;/a&gt;&lt;/strong&gt; and &lt;strong&gt;&lt;a href=&quot;https://managingosx.wordpress.com/2015/02/05/accessing-more-frameworks-with-python-2/&quot;&gt;Accessing More Frameworks with Python&lt;/a&gt;&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The second article I linked there is an important one in relation to this blog post as it‚Äôs about extending pyobjc on OS X to support working with Frameworks that you can‚Äôt directly import within python.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see how NetFS handles in this regard:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;kn&quot;&gt;import&lt;/span&gt; &lt;span class=&quot;nn&quot;&gt;NetFS&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ImportError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;No&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;module&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;named&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetFS&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So let‚Äôs take a suggestion from that second article as to how to fix this:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;import objc
from CoreFoundation import CFURLCreateWithString

__bundle__ = objc.initFrameworkWrapper(&amp;quot;NetFS&amp;quot;,
    frameworkIdentifier=&amp;quot;com.apple.NetFS&amp;quot;,
    frameworkPath=objc.pathForFramework(&amp;quot;/System/Library/Frameworks/NetFS.framework&amp;quot;),
    globals=globals())

share_url = CFURLCreateWithString(None, &amp;#39;afp://servername.local/sharename&amp;#39;, None)

&amp;gt;&amp;gt;&amp;gt; NetFSMountURLSync
&amp;lt;objc.function &amp;#39;NetFSMountURLSync&amp;#39; at 0x10f458270&amp;gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/8f09a0b8893c01637b74.js?file=02_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;No errors, very promising! Let‚Äôs take it for a spin.&lt;/p&gt;

&lt;p&gt;We won‚Äôt define any custom options, we‚Äôll just provide a URL to mount and a list (to match the CFArrayRef for our return mountpath).&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetFSMountURLSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;[])&lt;/span&gt;
&lt;span class=&quot;n&quot;&gt;Traceback&lt;/span&gt; &lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;most&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;recent&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;call&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;last&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;):&lt;/span&gt;
  &lt;span class=&quot;n&quot;&gt;File&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;&quot;&amp;lt;stdin&amp;gt;&quot;&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;line&lt;/span&gt; &lt;span class=&quot;mi&quot;&gt;1&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;ow&quot;&gt;in&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;&amp;lt;&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;module&lt;/span&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&lt;/span&gt;
&lt;span class=&quot;nb&quot;&gt;ValueError&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;depythonifying&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'pointer'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;got&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;'list'&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Ruh roh. It apparently didn‚Äôt like my list argument.&lt;/p&gt;

&lt;p&gt;Swapping it to None doesn‚Äôt help either.&lt;/p&gt;

&lt;p&gt;It‚Äôs expecting a pointer apparently. How do I get a pointer to a list (or an NSArray) in pyobjc? I know how to do it in ctypes - &lt;em&gt;but in pyojc???&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[INTERMISSION]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;At this point I came up with a crazy workaround, which worked, but I‚Äôm not putting it into this article, I‚Äôll save that for another one. The technique I developed is amazingly useful for other things but is too long to write in the margins here.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;[END OF INTERMISSION]&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;The real problem boils down to how &lt;code class=&quot;highlighter-rouge&quot;&gt;NetFSMountURLSync&lt;/code&gt; is defined in the bridgesupport file that shipped with OS X, located at: /System/Library/Frameworks/NetFS.framework/Resources/BridgeSupport/NetFS.bridgesupport&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;&amp;lt;function name=&amp;#39;NetFSMountURLSync&amp;#39;&amp;gt;
&amp;lt;arg type=&amp;#39;^{__CFURL=}&amp;#39;/&amp;gt;
&amp;lt;arg type=&amp;#39;^{__CFURL=}&amp;#39;/&amp;gt;
&amp;lt;arg type=&amp;#39;^{__CFString=}&amp;#39;/&amp;gt;
&amp;lt;arg type=&amp;#39;^{__CFString=}&amp;#39;/&amp;gt;
&amp;lt;arg type=&amp;#39;^{__CFDictionary=}&amp;#39;/&amp;gt;
&amp;lt;arg type=&amp;#39;^{__CFDictionary=}&amp;#39;/&amp;gt;
&amp;lt;arg type=&amp;#39;^^{__CFArray}&amp;#39;/&amp;gt;
&amp;lt;retval type=&amp;#39;i&amp;#39;/&amp;gt;
&amp;lt;/function&amp;gt;&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/8f09a0b8893c01637b74.js?file=03_snip.xml&quot;&gt; &lt;/script&gt;

&lt;p&gt;That last argument is what‚Äôs killing us: &lt;code class=&quot;highlighter-rouge&quot;&gt;&amp;lt;arg type='^^{__CFArray}'/&amp;gt;&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;‚Ä¶ a pointer to a pointer to a CFArray ‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶ aka a pointer to a CFArrayRef ‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶ aka a pointer to a NSArray (&lt;a href=&quot;https://developer.apple.com/library/ios/documentation/CoreFoundation/Conceptual/CFDesignConcepts/Articles/tollFreeBridgedTypes.html&quot;&gt;via bridging&lt;/a&gt;)&lt;/p&gt;

&lt;p&gt;Googling for countless examples on how to use &lt;code class=&quot;highlighter-rouge&quot;&gt;NetFSMountURLSync&lt;/code&gt; show I can pass a null pointer by reference for this argument. OS X isn‚Äôt expecting me to pass it a CFArrayRef (NSArray), it will &lt;u&gt;build one for me&lt;/u&gt; and give me back a pointer to it.&lt;/p&gt;

&lt;p&gt;I don‚Äôt really need to put anything of value &lt;em&gt;into&lt;/em&gt; this function argument, I just need to get something &lt;em&gt;out&lt;/em&gt; of it.&lt;/p&gt;

&lt;p&gt;So without any really good ideas on how to deal with this situation, I emailed the maintainer of the &lt;a href=&quot;http://pythonhosted.org/pyobjc/&quot;&gt;pyobjc project&lt;/a&gt; - Ronald Oussoren.&lt;/p&gt;

&lt;p&gt;He is an &lt;em&gt;extremely&lt;/em&gt; kind person and has responded to me the few times I‚Äôve done this to him before. He definitely came through again this time üòÉ&lt;/p&gt;

&lt;p&gt;His recommendation was that because all of the arguments were basically toll-free bridged types (&lt;em&gt;pointer to a CFURL&lt;/em&gt; = &lt;em&gt;CFURLRef&lt;/em&gt; = &lt;em&gt;NSURL&lt;/em&gt;, etc.), it would be best to rewrite the signature as taking a series of object type arguments and then changing the last argument from an input argument into an output.&lt;/p&gt;

&lt;p&gt;While pyobjc has problems with double pointer signatures (&lt;code class=&quot;highlighter-rouge&quot;&gt;^^{__CFArray}&lt;/code&gt; - each &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt; indicates a pointer &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html&quot;&gt;per the documentation&lt;/a&gt;), it has no problems with a single level of pointers.&lt;/p&gt;

&lt;p&gt;By changing the signature from &lt;code class=&quot;highlighter-rouge&quot;&gt;^^{__CFArray}&lt;/code&gt; (aka &lt;em&gt;pointer to a CFArrayRef&lt;/em&gt; aka &lt;em&gt;pointer to a NSArray&lt;/em&gt;) to &lt;code class=&quot;highlighter-rouge&quot;&gt;^@&lt;/code&gt; (&lt;em&gt;pointer to an object&lt;/em&gt;), pyobjc becomes able to handle it with ease! Just needed to get from &lt;code class=&quot;highlighter-rouge&quot;&gt;^^&lt;/code&gt; to &lt;code class=&quot;highlighter-rouge&quot;&gt;^&lt;/code&gt;.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;import objc
from CoreFoundation import CFURLCreateWithString

__bundle__ = objc.initFrameworkWrapper(&amp;quot;NetFS&amp;quot;,
    frameworkIdentifier=&amp;quot;com.apple.NetFS&amp;quot;,
    frameworkPath=objc.pathForFramework(&amp;quot;/System/Library/Frameworks/NetFS.framework&amp;quot;),
    globals=globals())

share_url = CFURLCreateWithString(None, &amp;#39;afp://servername.local/sharename&amp;#39;, None)

# delete the imported NetFSMountURLSync so we can rewrite it
# while keeping everything else from NetFS.framework
del NetFSMountURLSync

objc.loadBundleFunctions(__bundle__, globals(), [(&amp;#39;NetFSMountURLSync&amp;#39;, &amp;#39;i@@@@@@o^@&amp;#39;)])&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/8f09a0b8893c01637b74.js?file=04_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Let‚Äôs break down that signature: &lt;code class=&quot;highlighter-rouge&quot;&gt;i@@@@@@o^@&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;The function has 1 return value and 7 input arguments.&lt;/p&gt;

&lt;p&gt;&lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Conceptual/ObjCRuntimeGuide/Articles/ocrtTypeEncodings.html&quot;&gt;Per the documentation&lt;/a&gt;, we start off by defining the return value as &lt;code class=&quot;highlighter-rouge&quot;&gt;i&lt;/code&gt;, an &lt;strong&gt;int&lt;/strong&gt; type, which is pretty common for functions (usually used for error codes).&lt;/p&gt;

&lt;p&gt;The arguments follow, starting with 6 &lt;code class=&quot;highlighter-rouge&quot;&gt;@&lt;/code&gt; which indicates 6 &lt;strong&gt;object&lt;/strong&gt; type arguments.&lt;/p&gt;

&lt;p&gt;Then magic for the last argument: &lt;code class=&quot;highlighter-rouge&quot;&gt;o^@&lt;/code&gt;: out-only pointer to an &lt;strong&gt;object&lt;/strong&gt; type.&lt;/p&gt;

&lt;p&gt;When you provide a signature like this to pyobjc, you still have to pass &lt;code class=&quot;highlighter-rouge&quot;&gt;None&lt;/code&gt; (null pointer) for the argument, but instead of having to deal with dereferencing pointers it saves you the pain &lt;em&gt;and just moves it to a second return value&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;Here‚Äôs how you use it:&lt;/p&gt;

&lt;div class=&quot;language-python highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;error&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountpaths&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;NetFSMountURLSync&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;n&quot;&gt;share_url&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;,&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;None&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;)&lt;/span&gt;

&lt;span class=&quot;o&quot;&gt;&amp;gt;&amp;gt;&amp;gt;&lt;/span&gt; &lt;span class=&quot;n&quot;&gt;mountpaths&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;[&lt;/span&gt;&lt;span class=&quot;mi&quot;&gt;0&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;]&lt;/span&gt;
&lt;span class=&quot;s&quot;&gt;u'/Volumes/sharename'&lt;/span&gt;

&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Holy cow - IT WORKED AND IT MOUNTED - how freaking cool is that???&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;If you‚Äôd like a more polished version of the code in this article, including the ability to mount shares at an arbitrary mount path (the directory has to exist in advance) and the use of some of the open and mount options listed above, &lt;a href=&quot;https://gist.github.com/pudquick/1362a8908be01e23041d&quot;&gt;you can find it here&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It still lacks %-style encoding (like %20 for a space) for username and password portions of the URL. Exercise is left up to the reader to implement üòÑ&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- mike&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sat, 08 Aug 2015 16:15:00 -0700</pubDate>
        <link>http://michaellynn.github.io/2015/08/08/learn-you-a-better-pyobjc-bridgesupport-signature/</link>
        <guid isPermaLink="true">http://michaellynn.github.io/2015/08/08/learn-you-a-better-pyobjc-bridgesupport-signature/</guid>
      </item>
    
      <item>
        <title>Customized Python.app Bundles</title>
        <description>&lt;p&gt;The python that ships with OS X is not managed by &lt;a href=&quot;http://python.org&quot;&gt;python.org&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;It is a custom Apple-maintained distribution of python - much in the same way that Apple used to have their own distribution of Java included in OS X (Apple Java is still available, but has been deprecated and doesn‚Äôt ship with OS X - &lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/releasenotes/General/rn-osx-10.11/&quot;&gt;10.11 will be the last version to ever have it&lt;/a&gt;).&lt;/p&gt;

&lt;p&gt;As such, Apple‚Äôs python has some customizations:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;/usr/bin/python&lt;/code&gt; is not actually the real ‚Äúpython‚Äù binary. It is actually a stub binary that calls the real python interpreter that your OS is configured to use (for more configuration details, see &lt;a href=&quot;https://www.afp548.com/2013/04/25/python-versioning-in-os-x/&quot;&gt;my AFP548 article&lt;/a&gt;)&lt;/li&gt;
  &lt;li&gt;It ships with many third-party modules pre-installed that are not part of the core python distribution, including the lovely &lt;a href=&quot;https://pythonhosted.org/pyobjc/&quot;&gt;pyobjc&lt;/a&gt;, a personal favorite of mine.&lt;/li&gt;
  &lt;li&gt;‚Ä¶ and because they want to encourage python &amp;lt;-&amp;gt; Objective-C bridging, there is a ‚ÄúPython.app‚Äù bundle that‚Äôs included, allowing OS X APIs that need application bundle details (Dock icon, display name, etc.) to function. This is where we get the lovely ‚Äúrocketship‚Äù, if you‚Äôve ever seen it before:&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-07-31-customized-python-app-bundles/rocketship.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Unfortunately, the ‚ÄúPython.app‚Äù bundle is located in a subdirectory within /System/Library/Frameworks/Python.framework.&lt;/p&gt;

&lt;p&gt;This means you &lt;em&gt;really shouldn‚Äôt&lt;/em&gt; mess with it or change it - making customization of how python presents itself when it appears in the Dock as a GUI application really annoying. And in 10.11, with the advent of &lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/releasenotes/MacOSX/WhatsNewInOSX/Articles/MacOSX10_11.html#//apple_ref/doc/uid/TP40016227-DontLinkElementID_19&quot;&gt;System Integrity Protection&lt;/a&gt; it will be &lt;strong&gt;extremely painful&lt;/strong&gt; to make modifications, even if you wanted to.&lt;/p&gt;

&lt;p&gt;But SIP isn‚Äôt even the biggest issue facing python in 10.11, it‚Äôs just made the real culprit worse.&lt;/p&gt;

&lt;p&gt;The big baddie coming up is: &lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/releasenotes/MacOSX/WhatsNewInOSX/Articles/MacOSX10_11.html#//apple_ref/doc/uid/TP40016227-DontLinkElementID_18&quot;&gt;App Transport Security&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;Why is ATS a problem you might ask?&lt;/p&gt;

&lt;p&gt;Well, if you write any python code currently on OS X that relies on the NSURL APIs via pyobjc - &lt;em&gt;without performing some major voodoo&lt;/em&gt;, you‚Äôre now going to be restricted to &lt;strong&gt;only&lt;/strong&gt; HTTPS connections (and only those that meet the strict/higher encryption requirements of ATS)!&lt;/p&gt;

&lt;p&gt;The reason for this is that disabling ATS to allow the use of HTTP URLs via NSURL APIs requires &lt;a href=&quot;https://developer.apple.com/library/prerelease/ios/technotes/App-Transport-Security-Technote/&quot;&gt;special keys in the Info.plist of the application bundle&lt;/a&gt; ‚Ä¶ &lt;strong&gt;which are not present in the Apple-provided Python.app&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;And since you really can‚Äôt make changes to the embedded Info.plist (and any changes would go away, potentially, with an OS update), this gets pretty painful pretty quickly.&lt;/p&gt;

&lt;p&gt;Several of us that work on &lt;a href=&quot;https://github.com/munki/munki&quot;&gt;munki&lt;/a&gt; learned about this situation when Developer Preview 5 of 10.11 was released (when ATS became enabled), as munki made the switch to using NSURL APIs quite some time ago.&lt;/p&gt;

&lt;p&gt;Out of that research, we did figure out &lt;a href=&quot;https://github.com/munki/munki/commit/1dd8329d665d1d724ddc56ea703552effcd42db8&quot;&gt;a crazy fix&lt;/a&gt; that makes munki work again - but some alternative approaches were also discovered, one of which was suggested by &lt;a href=&quot;https://twitter.com/bruienne/&quot;&gt;Pepijn Bruienne&lt;/a&gt;:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;It is possible to ‚Äústub out‚Äù an alternate Python.app bundle which symlinks the /System/Library/Framework/Python.framework resources - &lt;strong&gt;except for&lt;/strong&gt; Info.plist.&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;You can provide your own Info.plist and then execute python from within this alternate application bundle and OS X will use your customizations instead! Not only could you override ATS if you wanted to, now you can customize the icon in the Dock, the name in the menubar, the bundle identifier of your python instance - the possibilities are endless.&lt;/p&gt;

&lt;p&gt;So, to that effect, I wrote a piece of code that quickly stubs out a new Python.app bundle to a location of your choice, complete with icon customization and Info.plist overrides:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;import sys, os, os.path, tempfile, plistlib, shutil

class TempApp(object):
    def __init__(self, infoPlist_dict, app_path=None, bundle_name=&amp;#39;TempApp&amp;#39;, cleanup=True, app_icon=None):
        # infoPlist_dict: A dict containing key values that should be set/overridden
        #                 vs. the normal Python.app keys.
        #       app_path: The path to where your app should go. Example: &amp;#39;/usr/local/myOrgStuff&amp;#39;
        #                 This directory needs to pre-exist. If app_path is left at None,
        #                 a temporary directory will be created and used and the value of
        #                 cleanup will be forced to True
        #    bundle_name: The name of your .app. This tends to be what shows in the Dock.
        #                 Spaces in the name are ok, but keep it short.
        #        cleanup: If app_path is provided, cleanup set to False will leave the .app
        #                 bundle behind rather than removing it on object destruction.
        #       app_icon: Set to the path of a .icns file if you wish to have a custom app icon
        #
        # Setup our defaults
        super(type(self), self).__init__()
        self.path           = None
        self.cleanup_parent = False
        self.cleanup        = cleanup
        self.returncode     = 0
        # First we look up which python we&amp;#39;re running with so we know which Python.app to clone
        # ... We&amp;#39;ll just cheat and use the path of &amp;#39;os&amp;#39; which we already imported.
        base_python = os.__file__.split(os.path.join(&amp;#39;lib&amp;#39;, &amp;#39;python2&amp;#39;),1)[0]
        python_app  = os.path.join(base_python, &amp;#39;Resources&amp;#39;, &amp;#39;Python.app&amp;#39;)
        app_name = &amp;#39;%s.app&amp;#39; % (os.path.basename(bundle_name))
        # Now we setup where we want the new Python.app clone to go
        if app_path is None:
            # Dynamically generate a path and force the value of cleanup
            self.cleanup        = True
            # Also need to cleanup the temp directory we made
            self.cleanup_parent = True
            app_path  = tempfile.mkdtemp()
        else:
            # Verify the parent path exists
            # Trim trailing slashes
            tmp_path = os.path.normpath(app_path)
            if not os.path.exists(tmp_path):
                raise Exception(&amp;#39;app_path supplied &amp;quot;%s&amp;quot; does not exist&amp;#39; % app_path)
            elif not os.path.isdir(tmp_path):
                raise Exception(&amp;#39;app_path supplied &amp;quot;%s&amp;quot; does not appear to be a directory&amp;#39; % app_path)
            app_path = tmp_path
        if app_icon is not None:
            if not os.path.exists(app_icon):
                raise Exception(&amp;#39;app_icon supplied &amp;quot;%s&amp;quot; does not exist&amp;#39; % app_icon)
            elif not os.path.isfile(app_icon):
                raise Exception(&amp;#39;app_icon supplied &amp;quot;%s&amp;quot; does not appear to be a file&amp;#39; % app_icon)
        self.path = os.path.join(app_path, app_name)
        # Make the bundle directory
        os.mkdir(self.path)
        os.makedirs(os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;MacOS&amp;#39;))
        # Set up symlink contents
        os.symlink(os.path.join(python_app, &amp;#39;Contents&amp;#39;, &amp;#39;MacOS&amp;#39;, &amp;#39;Python&amp;#39;), os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;MacOS&amp;#39;, &amp;#39;Python&amp;#39;))
        os.symlink(os.path.join(python_app, &amp;#39;Contents&amp;#39;, &amp;#39;PkgInfo&amp;#39;), os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;PkgInfo&amp;#39;))
        if app_icon is not None:
            # We create a custom Resources folder and copy the .icns file to the default &amp;#39;PythonInterpreter.icns&amp;#39; inside
            os.makedirs(os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;Resources&amp;#39;))
            shutil.copyfile(app_icon, os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;Resources&amp;#39;, &amp;#39;PythonInterpreter.icns&amp;#39;))
        else:
            # No app_icon provided, just use the default resources
            os.symlink(os.path.join(python_app, &amp;#39;Contents&amp;#39;, &amp;#39;Resources&amp;#39;), os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;Resources&amp;#39;))
        os.symlink(os.path.join(python_app, &amp;#39;Contents&amp;#39;, &amp;#39;version.plist&amp;#39;), os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;version.plist&amp;#39;))
        # Grab the contents of the existing Info.plist ... yes, using plistlib - this Info.plist is so far only XML ...
        original_infoPlist = plistlib.readPlist(os.path.join(python_app, &amp;#39;Contents&amp;#39;, &amp;#39;Info.plist&amp;#39;))
        # Make our changes from infoPlist_dict
        original_infoPlist.update(infoPlist_dict)
        # Write the contents back to the new location
        plistlib.writePlist(original_infoPlist, os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;Info.plist&amp;#39;))
    def cleanup_app(self):
        # Kill the process if it&amp;#39;s still running
        if self.cleanup:
            # Delete the .app bundle, best effort
            try:
                shutil.rmtree(self.path, True)
            except:
                pass
        if self.cleanup_parent:
            # This was an auto-generated directory, remove it as well
            try:
                shutil.rmtree(os.path.dirname(self.path), True)
            except:
                pass
    def __del__(self):
        self.cleanup_app()&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/8e8e09b8c1f5ceb5020b.js?file=01_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;To use it as it‚Äôs written here, you‚Äôd create a TempApp instance with your customizations and then call it like a normal external executable with &lt;a href=&quot;https://docs.python.org/2/library/subprocess.html&quot;&gt;subprocess&lt;/a&gt; and the appropriate arguments (like some code.py file, etc.):&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;# How to use it, assuming it&amp;#39;s saved to a file named tempapp.py
from tempapp import *
import subprocess

infoPlist_overrides = {&amp;#39;CFBundleName&amp;#39;: &amp;#39;Menu Name&amp;#39;}
myApp  = TempApp(infoPlist_overrides, bundle_name=&amp;#39;Dock Name&amp;#39;, app_icon=&amp;#39;/Users/mike/Desktop/tinker.icns&amp;#39;)
output = subprocess.check_output([myApp.path + &amp;#39;/Contents/MacOS/Python&amp;#39;, path_to_py_file])&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/8e8e09b8c1f5ceb5020b.js?file=02_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;‚Ä¶ but this is me writing this, so you &lt;em&gt;know&lt;/em&gt; I didn‚Äôt stop there.&lt;/p&gt;

&lt;p&gt;Python includes another fantastic module called multiprocessing and I especially love the workflow of the &lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html#the-process-class&quot;&gt;Process class&lt;/a&gt; in it.&lt;/p&gt;

&lt;p&gt;It allows you to spin up another python interpreter trivially in a new process and easily share data between this child process and the original with things like &lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html#exchanging-objects-between-processes&quot;&gt;Queues and Pipes&lt;/a&gt;. Additionally, you don‚Äôt need a chunk of python code in a file - you can just pass a function to the Process class as the &lt;code class=&quot;highlighter-rouge&quot;&gt;target&lt;/code&gt; argument and it will use that for the core of execution.&lt;/p&gt;

&lt;p&gt;It‚Äôs a lovely lovely module and I‚Äôd recommend using it for any time you‚Äôd need to spin up additional python instances ‚Ä¶&lt;/p&gt;

&lt;p&gt;‚Ä¶ except in the specific case of our situation: running a python interpreter from a different path&lt;/p&gt;

&lt;p&gt;The problem is: For python 2.6+ for Windows - &lt;a href=&quot;https://docs.python.org/2/library/multiprocessing.html#multiprocessing.set_executable&quot;&gt;they make it trivial to use python at a different path&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;For OS X and other Unix platforms, they didn‚Äôt add that support &lt;strong&gt;&lt;a href=&quot;https://docs.python.org/3/library/multiprocessing.html#multiprocessing.set_executable&quot;&gt;until python 3.4&lt;/a&gt;&lt;/strong&gt;.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;GAHHHH!&lt;/strong&gt; So annoying.&lt;/p&gt;

&lt;p&gt;‚Ä¶ So, I updated my code and added some capability to do that ‚Ä¶&lt;/p&gt;

&lt;p&gt;In order to do this, I used the capability of the &lt;a href=&quot;https://docs.python.org/2/library/marshal.html&quot;&gt;marshal&lt;/a&gt; module to turn python code into a semi-portable (within same python builds on same architecture - not a problem in our situation) data stream that can be passed to another python instance and turned back into functional code.&lt;/p&gt;

&lt;p&gt;I also used the &lt;a href=&quot;https://docs.python.org/2/library/pickle.html&quot;&gt;pickle&lt;/a&gt; module to do the same for sending and receiving data between the processes.&lt;/p&gt;

&lt;p&gt;This allowed me to pass my python code to the child process over stdin (which keeps the code out of the argument list, keeping the output of tools like &lt;code class=&quot;highlighter-rouge&quot;&gt;ps&lt;/code&gt; and &lt;code class=&quot;highlighter-rouge&quot;&gt;top&lt;/code&gt; uncluttered).&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;import sys, os, os.path, tempfile, plistlib, shutil, marshal, subprocess, pickle, textwrap

class TempApp(object):
    _skeleton_app = textwrap.dedent(&amp;quot;&amp;quot;&amp;quot;
                      import sys, marshal, types, pickle
                      main_func_marshal = %s
                      args_pickle       = %s
                      code = marshal.loads(main_func_marshal)
                      main_func = types.FunctionType(code, globals(), &amp;quot;main_func&amp;quot;)
                      args = dict(pickle.loads(args_pickle))
                      returncode, result = main_func(args)
                      print pickle.dumps(result)
                      sys.exit(returncode)
                      &amp;quot;&amp;quot;&amp;quot;)
    def __init__(self, infoPlist_dict, app_path=None, bundle_name=&amp;#39;TempApp&amp;#39;, cleanup=True, app_icon=None):
        # infoPlist_dict: A dict containing key values that should be set/overridden
        #                 vs. the normal Python.app keys.
        #       app_path: The path to where your app should go. Example: &amp;#39;/usr/local/myOrgStuff&amp;#39;
        #                 This directory needs to pre-exist. If app_path is left at None,
        #                 a temporary directory will be created and used and the value of
        #                 cleanup will be forced to True
        #    bundle_name: The name of your .app. This tends to be what shows in the Dock.
        #                 Spaces in the name are ok, but keep it short.
        #        cleanup: If app_path is provided, cleanup set to False will leave the .app
        #                 bundle behind rather than removing it on object destruction.
        #       app_icon: Set to the path of a .icns file if you wish to have a custom app icon
        #
        # Setup our defaults
        super(type(self), self).__init__()
        self.path           = None
        self.cleanup_parent = False
        self.cleanup        = cleanup
        self.returncode     = 0
        # First we look up which python we&amp;#39;re running with so we know which Python.app to clone
        # ... We&amp;#39;ll just cheat and use the path of &amp;#39;os&amp;#39; which we already imported.
        base_python = os.__file__.split(os.path.join(&amp;#39;lib&amp;#39;, &amp;#39;python2&amp;#39;),1)[0]
        python_app  = os.path.join(base_python, &amp;#39;Resources&amp;#39;, &amp;#39;Python.app&amp;#39;)
        app_name = &amp;#39;%s.app&amp;#39; % (os.path.basename(bundle_name))
        # Now we setup where we want the new Python.app clone to go
        if app_path is None:
            # Dynamically generate a path and force the value of cleanup
            self.cleanup        = True
            # Also need to cleanup the temp directory we made
            self.cleanup_parent = True
            app_path  = tempfile.mkdtemp()
        else:
            # Verify the parent path exists
            # Trim trailing slashes
            tmp_path = os.path.normpath(app_path)
            if not os.path.exists(tmp_path):
                raise Exception(&amp;#39;app_path supplied &amp;quot;%s&amp;quot; does not exist&amp;#39; % app_path)
            elif not os.path.isdir(tmp_path):
                raise Exception(&amp;#39;app_path supplied &amp;quot;%s&amp;quot; does not appear to be a directory&amp;#39; % app_path)
            app_path = tmp_path
        if app_icon is not None:
            if not os.path.exists(app_icon):
                raise Exception(&amp;#39;app_icon supplied &amp;quot;%s&amp;quot; does not exist&amp;#39; % app_icon)
            elif not os.path.isfile(app_icon):
                raise Exception(&amp;#39;app_icon supplied &amp;quot;%s&amp;quot; does not appear to be a file&amp;#39; % app_icon)
        self.path = os.path.join(app_path, app_name)
        # Make the bundle directory
        os.mkdir(self.path)
        os.makedirs(os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;MacOS&amp;#39;))
        # Set up symlink contents
        os.symlink(os.path.join(python_app, &amp;#39;Contents&amp;#39;, &amp;#39;MacOS&amp;#39;, &amp;#39;Python&amp;#39;), os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;MacOS&amp;#39;, &amp;#39;Python&amp;#39;))
        os.symlink(os.path.join(python_app, &amp;#39;Contents&amp;#39;, &amp;#39;PkgInfo&amp;#39;), os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;PkgInfo&amp;#39;))
        if app_icon is not None:
            # We create a custom Resources folder and copy the .icns file to the default &amp;#39;PythonInterpreter.icns&amp;#39; inside
            os.makedirs(os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;Resources&amp;#39;))
            shutil.copyfile(app_icon, os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;Resources&amp;#39;, &amp;#39;PythonInterpreter.icns&amp;#39;))
        else:
            # No app_icon provided, just use the default resources
            os.symlink(os.path.join(python_app, &amp;#39;Contents&amp;#39;, &amp;#39;Resources&amp;#39;), os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;Resources&amp;#39;))
        os.symlink(os.path.join(python_app, &amp;#39;Contents&amp;#39;, &amp;#39;version.plist&amp;#39;), os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;version.plist&amp;#39;))
        # Grab the contents of the existing Info.plist ... yes, using plistlib - this Info.plist is so far only XML ...
        original_infoPlist = plistlib.readPlist(os.path.join(python_app, &amp;#39;Contents&amp;#39;, &amp;#39;Info.plist&amp;#39;))
        # Make our changes from infoPlist_dict
        original_infoPlist.update(infoPlist_dict)
        # Write the contents back to the new location
        plistlib.writePlist(original_infoPlist, os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;Info.plist&amp;#39;))
    def cleanup_app(self):
        # Kill the process if it&amp;#39;s still running
        if self.cleanup:
            # Delete the .app bundle, best effort
            try:
                shutil.rmtree(self.path, True)
            except:
                pass
        if self.cleanup_parent:
            # This was an auto-generated directory, remove it as well
            try:
                shutil.rmtree(os.path.dirname(self.path), True)
            except:
                pass
    def __del__(self):
        self.cleanup_app()
    def run(self, func, **kwargs):
        # Spawn an instance of this app bundle, passing func as the core of the new process.
        # Keyword arguments are passed as a dictionary to the new process&amp;#39;s core function.
        # marshal up the function
        main_func_marshal = marshal.dumps(func.func_code).__repr__()
        # pickle up the args
        args_pickle = pickle.dumps(kwargs.items()).__repr__()
        # build the core code
        new_app = self._skeleton_app % (main_func_marshal, args_pickle)
        # Spawn the new process
        proc = subprocess.Popen([os.path.join(self.path, &amp;#39;Contents&amp;#39;, &amp;#39;MacOS&amp;#39;, &amp;#39;Python&amp;#39;), &amp;#39;-&amp;#39;], stdin=subprocess.PIPE, stdout=subprocess.PIPE, stderr=subprocess.PIPE)
        # Give it the code
        proc.stdin.write(new_app)
        # Let it run to completion, record output
        sout, serr = proc.communicate()
        # Record returncode
        self.returncode = proc.returncode
        result = None
        try:
            result = pickle.loads(sout)
        except:
            pass
        return result

def example_main_function(args_dict):
    # Do all your imports, classes, functions, etc. internal to your this application core function
    # Everything needs to be defined here
    # The return value from it should be a tuple: (process returncode [0 = success], pickle-able return result data)
    from AppKit import NSApp, NSApplication, NSAlert, NSInformationalAlertStyle, NSTimer
    class OKAlert(object):
        def __init__(self, message, buttons=None):
            super(type(self), self).__init__()
            self.alert = None
            self.message = message
            self.buttons = buttons
            self.result_code = None
        def runAndStop_(self, timer):
            self.alert = NSAlert.alloc().init()
            self.alert.setAlertStyle_(NSInformationalAlertStyle)
            self.alert.setMessageText_(self.message)
            if self.buttons is None:
                self.alert.addButtonWithTitle_(&amp;#39;OK&amp;#39;)
            else:
                for x in self.buttons:
                    self.alert.addButtonWithTitle_(x)
            NSApp.activateIgnoringOtherApps_(True)
            self.result_code = self.alert.runModal()
            NSApp.stop_(None)
        def run(self):
            NSTimer.scheduledTimerWithTimeInterval_target_selector_userInfo_repeats_(0.1, self, &amp;#39;runAndStop:&amp;#39;, &amp;#39;&amp;#39;, False)
            NSApplication.sharedApplication()
            NSApp.run()
    # Create our dialog
    dialog = OKAlert(args_dict.get(&amp;#39;message&amp;#39;), args_dict.get(&amp;#39;buttons&amp;#39;))
    # Run our dialog
    dialog.run()
    # (returncode [0 = success], results)
    return (0, dialog.result_code)

# How to use it
infoPlist_overrides = {&amp;#39;CFBundleName&amp;#39;: &amp;#39;Menu Name&amp;#39;}
myApp  = TempApp(infoPlist_overrides, bundle_name=&amp;#39;Dock Name&amp;#39;, app_icon=&amp;#39;/Users/mike/Desktop/tinker.icns&amp;#39;)
result = myApp.run(example_main_function, message=&amp;#39;The message was Hello!&amp;#39;, buttons=[&amp;#39;1st Button&amp;#39;])
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/bd98a589dbe0ddf17cd4.js&quot;&gt; &lt;/script&gt;

&lt;p&gt;It‚Äôs crazy code. But the results are pretty awesome.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-07-31-customized-python-app-bundles/running.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-07-31-customized-python-app-bundles/temp_loc.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;As you can see, I have full control over the visual representation of python - in the Dock, menubar, and even in application switching and Force Quit dialogs.&lt;/p&gt;

&lt;p&gt;Hope you found this as interesting as I did!&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- mike&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Fri, 31 Jul 2015 11:45:00 -0700</pubDate>
        <link>http://michaellynn.github.io/2015/07/31/customized-python-app-bundles/</link>
        <guid isPermaLink="true">http://michaellynn.github.io/2015/07/31/customized-python-app-bundles/</guid>
      </item>
    
      <item>
        <title>Exploring OS X Preview Signatures</title>
        <description>&lt;p&gt;If you‚Äôve never used it before, &lt;strong&gt;Preview.app&lt;/strong&gt; has an amazing ability to pull a
signature from the trackpad on your Mac or from the video feed of your FaceTime
camera. The feature is located under the menu &lt;em&gt;Tools -&amp;gt; Annotate -&amp;gt;
Signature&lt;/em&gt;.&lt;/p&gt;

&lt;p&gt;The capture experience is pretty magical, second only to (in my opinion) iTunes
using your camera to capture your iTunes gift card codes.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-07-26-exploring-os-x-preview-signatures/signature.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Once it has your signature stored, you can then use the same menu to place your signature into electronic documents like PDFs as transparent image overlays, allowing you to ‚Äúsign‚Äù them.&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-07-26-exploring-os-x-preview-signatures/award.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;Now that you‚Äôve stored your signature in your computer, one would hope that Apple spent some time protecting others from accessing it.&lt;/p&gt;

&lt;p&gt;Fortunately they did.&lt;/p&gt;

&lt;p&gt;In OS X 10.9 Mavericks, when you create a signature, two primary pieces of data are configured.&lt;/p&gt;

&lt;p&gt;In the user‚Äôs login.keychain, an application password keychain item called ‚ÄúPreview Signature Privacy‚Äù is created, with the following notes:&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-07-26-exploring-os-x-preview-signatures/keychain_notes.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;&lt;small&gt;* &lt;em&gt;(yes, I know this is a 10.10 screenshot - it‚Äôs prettier this way)&lt;/em&gt;&lt;/small&gt;&lt;/p&gt;

&lt;p&gt;The password contents of this keychain item are a hexadecimal string, representing 16 raw bytes of information.&lt;/p&gt;

&lt;p&gt;The second item that‚Äôs created is an application preference in the domain com.apple.Preview.signatures for the key ‚Äúitems-1‚Äù, which contains an array of data objects. The backend storage for this domain is located in the user‚Äôs application containers at:&lt;/p&gt;

&lt;pre&gt;~/Library/Containers/com.apple.Preview/Data/Library/Preferences/com.apple.Preview.signatures.plist&lt;/pre&gt;

&lt;p&gt;If you didn‚Äôt know me already, I‚Äôll just warn you now that my code here will be in &lt;a href=&quot;http://python.org/&quot;&gt;python&lt;/a&gt;. Since we‚Äôre going to be working a lot with plists, let‚Äôs get a few helper functions defined.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from Foundation import *

def readPlistFromData(data_obj):
    # Reads binary and XML plists from a NSData object / python string / raw bytes
    every_byte = &amp;#39;&amp;#39;.join([x for x in data_obj])
    nsdata_obj = NSData.dataWithBytes_length_(every_byte, len(every_byte))
    data, p_format, error = NSPropertyListSerialization.propertyListFromData_mutabilityOption_format_errorDescription_(nsdata_obj, \
                                                        NSPropertyListMutableContainersAndLeaves, None, None)
    return data
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=01_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;This has an advantage over the plistlib module included with python in that it can support binary plists as well as just XML.&lt;/p&gt;

&lt;p&gt;Next, let‚Äôs read the com.apple.Preview.signatures preference for the key ‚Äúitem-1‚Äù.&lt;/p&gt;

&lt;p&gt;&lt;strong&gt;Never. Ever. Read. Preferences. From. Plist. Files. Directly.&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(‚Ä¶ Unless you want to. I mean, I‚Äôm not your dad. Go for it if you really want to. But &lt;a href=&quot;https://developer.apple.com/library/mac/releasenotes/DataManagement/RN-CoreFoundationOlderNotes/#//apple_ref/doc/uid/TP40012903-TRANSLATED_CHAPTER_965-SW5&quot;&gt;Apple hates you for it&lt;/a&gt;.)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;However - following my own advice is a little tricky here! The location of the preference is stored on-disk within ~/Library/Containers, indicating this is a sandboxed application preference and isn‚Äôt normally meant to be accessed by other apps outside of Preview.app itself.&lt;/p&gt;

&lt;p&gt;‚Ä¶ But OS X will still let you read the preference, if you provide the full path to it.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from Foundation import *
import os.path

signature_array = CFPreferencesCopyValue(&amp;#39;items-1&amp;#39;, \
                     os.path.expanduser(&amp;#39;~/Library/Containers/com.apple.Preview/Data/Library/Preferences/com.apple.Preview.signatures.plist&amp;#39;), \
                     kCFPreferencesCurrentUser, kCFPreferencesAnyHost)
first_sig = signature_array[0]
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=02_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;The contents of the array is a data object, which if you try to look at it directly, you just see the hex encoding of it.&lt;/p&gt;

&lt;p&gt;But if you look at the first few characters in it, you might see something recognizable:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; str(first_sig)[:50]
'bplist00\xd4\x01\x02\x03\x04\x05\x06\x1e\x1fX$versionX$objectsY$archiverT$top'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;The first few characters ‚Äúbplist00‚Äù are an indicator that the contents of the array are binary plists themselves. So let‚Äôs unpack it.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;sig_plist = readPlistFromData(first_sig)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=03_snip.py&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sig_plist
{
    &quot;$archiver&quot; = NSKeyedArchiver;
    &quot;$objects&quot; =     (
        &quot;$null&quot;,
                {
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we‚Äôve got something new - an &lt;a href=&quot;https://developer.apple.com/library/prerelease/mac/documentation/Cocoa/Reference/Foundation/Classes/NSKeyedArchiver_Class/index.html&quot;&gt;NSKeyedArchiver&lt;/a&gt; object. This is a way for OS X (and iOS) to store data objects in a file-friendly format.&lt;/p&gt;

&lt;p&gt;So we need to decode the object. Let‚Äôs try!&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from Foundation import *
sig_decoded = NSKeyedUnarchiver.unarchiveObjectWithData_(first_sig)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=04_snip.py&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
objc.error: NSInvalidUnarchiveOperationException - *** -[NSKeyedUnarchiver decodeObjectForKey:]: cannot decode object of class (PVSignature)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Whoops. Looks like OS X doesn‚Äôt know how to natively handle a ‚ÄúPVSignature‚Äù file - so where do we learn about it?&lt;/p&gt;

&lt;p&gt;We‚Äôll need to compare two different pieces of information: what‚Äôs stored in the NSKeyedArchiver object and what exactly is a PVSignature object?&lt;/p&gt;

&lt;p&gt;For the PVSignature structure, we‚Äôll need the help of a great tool: &lt;a href=&quot;http://stevenygard.com/projects/class-dump/&quot;&gt;class-dump&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;It can dump the signature of Objective-C objects defined within applications and frameworks (‚Ä¶ hopefully PVSignature is within Preview.app itself!)&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;class-dump -H /Applications/Preview.app/Contents/MacOS/Preview
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Yay, our output includes a ‚ÄúPVSignature.h‚Äù file.&lt;/p&gt;

&lt;p&gt;Let‚Äôs see what‚Äôs inside:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;@interface PVSignature : NSObject &amp;lt;NSCoding&amp;gt;
{
    NSData *_undecryptedData;
    BOOL _cannotDecrypt;
    PVSignaturePayload *_payload;
    NSImage *_largeThumbnail;
    NSImage *_largeWhiteThumbnail;
    NSImage *_smallThumbnail;
    BOOL _thumbnailsGenerated;
    int _uid;
    BOOL _shouldPersist;
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=05_snip.m&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now let‚Äôs compare that against what‚Äôs &lt;em&gt;actually&lt;/em&gt; stored in the encoded object.&lt;/p&gt;

&lt;p&gt;When storing a single object, NSKeyedArchiver object stores the object attributes in the 2nd item of the ‚Äú$objects‚Äù key:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sig_plist['$objects'][1]
{
    &quot;$class&quot; = &quot;&amp;lt;CFKeyedArchiverUID 0x7fd3ada65f80 [0x7fff7951bed0]&amp;gt;{value = 4}&quot;;
    data = &quot;&amp;lt;CFKeyedArchiverUID 0x7fd3ada98480 [0x7fff7951bed0]&amp;gt;{value = 2}&quot;;
    uid = 1000;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So it looks like we have a ‚Äúdata‚Äù and ‚Äúuid‚Äù values only, unlike everything listed above.&lt;/p&gt;

&lt;p&gt;Enter my next favorite tool: &lt;a href=&quot;http://www.hopperapp.com&quot;&gt;Hopper&lt;/a&gt; (&lt;em&gt;a reverser‚Äôs best friend!&lt;/em&gt;)&lt;/p&gt;

&lt;p&gt;With Hopper, we‚Äôll read the executable to disassemble located at: /Applications/Preview.app/Contents/MacOS/Preview&lt;/p&gt;

&lt;p&gt;Once loaded up, we‚Äôre going to look under ‚ÄúLabels‚Äù for &lt;em&gt;PVSignature initWithCoder&lt;/em&gt; (the method that‚Äôs called when unarchiving an instance of a class).&lt;/p&gt;

&lt;p&gt;Once we find it, we can use &lt;em&gt;Window -&amp;gt; Show Psuedo Code of Procedure&lt;/em&gt;&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;[...]
rbx-&amp;gt;_undecryptedData = [[r14 decodeObjectForKey:@&quot;data&quot;] retain];
rbx-&amp;gt;_uid = [r14 decodeInt32ForKey:@&quot;uid&quot;];
rbx-&amp;gt;_cannotDecrypt = 0x0;
rbx-&amp;gt;_shouldPersist = 0x1;
rbx-&amp;gt;_largeThumbnail = 0x0;
rbx-&amp;gt;_smallThumbnail = 0x0;
rbx-&amp;gt;_payload = 0x0;
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Pretty staight forward to immitate:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from Foundation import *

class PVSignature(NSObject):
    _undecryptedData = None
    _uid = None
    _cannotDecrypt = None
    _shouldPersist = None
    _largeThumbnail = None
    _smallThumbnail = None
    _payload = None
    def init(self):
        self = super(PVSignature, self).init()
        if self == None: return None
        self._undecryptedData = None
        self._uid = None
        self._cannotDecrypt = None
        self._shouldPersist = None
        self._largeThumbnail = None
        self._smallThumbnail = None
        self._payload = None
        return self
    def initWithCoder_(self, coder):
        # use decodeObjectForKey when the key value could be something other than a primitive data type (looks like NSData here...)
        self._undecryptedData = coder.decodeObjectForKey_(u&amp;quot;data&amp;quot;)
        # use decodeIntForKey because it&amp;#39;s pretty obvious from sig_plist[&amp;#39;$objects&amp;#39;][1]
        self._uid = coder.decodeInt32ForKey_(u&amp;quot;uid&amp;quot;)
        self._shouldPersist = 1
        # We won&amp;#39;t set the other values to 0, because in this context that&amp;#39;s actually a null pointer for them
        return self

# Define our class for itself
NSKeyedUnarchiver.setClass_forClassName_(PVSignature, &amp;quot;PVSignature&amp;quot;)
# Attempt to decode again!
sig_decoded = NSKeyedUnarchiver.unarchiveObjectWithData_(first_sig)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=06_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Yay, no errors! Let‚Äôs see what our object looks like:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sig_decoded._uid
1000

&amp;gt;&amp;gt;&amp;gt; sig_decoded._undecryptedData
&amp;lt;458e1def 5434c5ab 94094049 dfd2424d 0ebe7ff6 c79c7b82 463d6d56 ...
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Cool. Let‚Äôs try the trick we did before for checking out if the raw data is anything we recognize:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; str(sig_decoded._undecryptedData)[:50]
'E\x8e\x1d\xefT4\xc5\xab\x94\t@I\xdf\xd2BM\x0e\xbe\x7f\xf6\xc7\x9c{\x82F=mV\xac\xee\x1c\xda8\xe357|\xbb\xa9\xf9\xdc\xbd\x16\x1a+6\x16\x90Z\xfc'
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Hmm. Nope. Not ringing any bells.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚Ä¶ It‚Äôs like it‚Äôs encrypted or something ‚Ä¶&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;But hey, we have that other piece of data - the password value for ‚ÄúPreview Signature Privacy‚Äù:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúUsed by Preview to encrypt stored signatures. If modified or deleted, any existing signatures will become unusable.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Sounds like it‚Äôs a decryption key to me!&lt;/p&gt;

&lt;p&gt;I‚Äôm going to cheat here and just raw copy the value using Keychain Access (just clicking on ‚ÄúShow Password‚Äù and copying out the value). &lt;em&gt;(I have code for reading from the keychain, but that‚Äôs for another post.)&lt;/em&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;import binascii
hex_key = &amp;#39;E29D5B36A433C4E592B7A3991EF8691C&amp;#39;
binary_key = binascii.unhexlify(hex_key)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=07_snip.py&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; len(binary_key)
16
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;A 16 byte key. If you know anything about encryption, that‚Äôs a pretty common key length for many common &lt;a href=&quot;https://en.wikipedia.org/wiki/Block_cipher_mode_of_operation&quot;&gt;block cipher (ECB and CBC) algorithms&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;But we need to know exactly what algorithm was used here.&lt;/p&gt;

&lt;p&gt;Back to Hopper we go!&lt;/p&gt;

&lt;p&gt;Searching through PVSignature code, this would seem key: &lt;strong&gt;-[PVSignature decrypt]:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;Looking at the pseudocode for it, it generates an instance of a new class ‚ÄúPVSignatureEncryptor‚Äù:&lt;/p&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;rax = [PVSignatureEncryptor sharedInstance];&lt;/code&gt;&lt;/p&gt;

&lt;p&gt;Based on that, we find: &lt;strong&gt;-[PVSignatureEncryptor decryptedData:]:&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;This code has exactly what we‚Äôre looking for - information about how it decrypts the data:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;if (CCCrypt(0x1, 0x0, 0x1, r12, 0x10, 0x0, var_68, r14, r15, rax, var_58) == 0x0) {
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;And in this instance, we want to look at not just the pseudocode, but also the assembly for a little more clarity:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;   mov edi, 0x1    ; argument &quot;op&quot; for method imp___stubs__CCCrypt
   mov esi, 0x0    ; argument &quot;alg&quot; for method imp___stubs__CCCrypt
   mov edx, 0x1    ; argument &quot;options&quot; for method imp___stubs__CCCrypt
   mov rcx, r12    ; argument &quot;key&quot; for method imp___stubs__CCCrypt
   mov r8d, 0x10   ; argument &quot;keyLength&quot; for method imp___stubs__CCCrypt
   xor r9d, r9d    ; argument &quot;iv&quot; for method imp___stubs__CCCrypt
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looking at the &lt;a href=&quot;https://developer.apple.com/library/ios/documentation/System/Conceptual/ManPages_iPhoneOS/man3/CCCrypt.3cc.html&quot;&gt;documentation for CCCrypt&lt;/a&gt;, we get:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CCCrypt(CCOperation op, CCAlgorithm alg, CCOptions options,
         const void *key, size_t keyLength, const void *iv,
         const void *dataIn, size_t dataInLength, void *dataOut,
         size_t dataOutAvailable, size_t *dataOutMoved);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Now we can figure out the arguments that were passed, with a little help from the &lt;a href=&quot;http://www.opensource.apple.com/source/CommonCrypto/CommonCrypto-36064/CommonCrypto/CommonCryptor.h&quot;&gt;CommonCryptor.h header file&lt;/a&gt; and the above:&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;operation/‚Äùop‚Äù: &lt;strong&gt;0x1&lt;/strong&gt; (&lt;em&gt;kCCDecrypt&lt;/em&gt;, from &amp;lt;CommonCryptor.h&amp;gt;)&lt;/li&gt;
  &lt;li&gt;algorithm/‚Äùalg‚Äù: &lt;strong&gt;0x0&lt;/strong&gt;   (&lt;em&gt;kCCAlgorithmAES128&lt;/em&gt;)&lt;/li&gt;
  &lt;li&gt;‚Äúoptions‚Äù: &lt;strong&gt;0x1&lt;/strong&gt;   (&lt;em&gt;kCCOptionPKCS7Padding&lt;/em&gt; in this context)&lt;/li&gt;
  &lt;li&gt;‚Äúkey‚Äù is probably our ‚Äúbinary_key‚Äù from above&lt;/li&gt;
  &lt;li&gt;‚ÄúkeyLength‚Äù: &lt;strong&gt;0x10&lt;/strong&gt; which is hex for 16 - a length that matches the length of our ‚Äúbinary_key‚Äù üòÄ&lt;/li&gt;
  &lt;li&gt;‚Äúiv‚Äù: &lt;strong&gt;0&lt;/strong&gt;, aka null pointer / empty value in this context&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;The rest of the arguments we don‚Äôt care so much about as they‚Äôre for handling getting data into/out of the decryption.&lt;/p&gt;

&lt;p&gt;With one last bit from the documentation on CCCrypt, we have everything we need:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúIf CBC mode is selected and no IV is provided, an IV of all zeroes will be used‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Ok, now to try decrypting. We‚Äôre going to use the python Crypto module for this part:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from Crypto.Cipher import AES
iv = &amp;#39;\x00&amp;#39;*16  # 16 byte character array of zeroes
cipher = AES.new(binary_key, AES.MODE_CBC, IV=iv)
decrypted_data = cipher.decrypt(str(sig_decoded._undecryptedData))
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=08_snip.py&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; decrypted_data[:50]
&quot;\xe4\x9c\x0f\xff\xd2\xee`\x0e\xbe8w8\xef\xaaT\xf1\x07\xeas\xe0Z\x96'6\xfc\x95\x9e\xa9\xce\xb5&amp;gt;\xd4bplist00\xd4\x01\x02\x03\x04\x05\x06,-X&quot;
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;em&gt;Oh ho ho!&lt;/em&gt; I see a &lt;strong&gt;bplist00&lt;/strong&gt; ‚Ä¶&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; decrypted_data.index('bplist00')
32
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Looks like there‚Äôs a 32 byte prefix - looking back at the code of &lt;strong&gt;-[PVSignatureEncryptor decryptedData:]&lt;/strong&gt;, we can see:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;CC_SHA256(rbx, rsi, var_50);
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;SHA-256 is a 32-byte CRC. Likely the decrypted data is prefixed with its CRC hash so that the code can tell easily if it decrypted the signature correctly by validating the hash of the binary plist data matches the hash in the 32 byte prefix.&lt;/p&gt;

&lt;p&gt;So let‚Äôs skip the first 32 bytes and try to parse it directly as a plist.&lt;/p&gt;

&lt;p&gt;‚Ä¶ But before we do that, the &lt;em&gt;‚ÄúkCCOptionPKCS7Padding‚Äù&lt;/em&gt; option that was mentioned earlier means that this data is padded out to a multiple of 16 bytes:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; len(decrypted_data)/16.
120.0
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;So we have to remove the padding per the PKCS7 standard. We can do that with this bit of code:&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;class PKCS7Encoder():
    class InvalidBlockSizeError(Exception):
        &amp;quot;&amp;quot;&amp;quot;Raised for invalid block sizes&amp;quot;&amp;quot;&amp;quot;
        pass
    def __init__(self, block_size=16):
        if block_size &amp;lt; 2 or block_size &amp;gt; 255:
            raise PKCS7Encoder.InvalidBlockSizeError(&amp;#39;The block size must be &amp;#39; \
                    &amp;#39;between 2 and 255, inclusive&amp;#39;)
        self.block_size = block_size
    def encode(self, text):
        text_length = len(text)
        amount_to_pad = self.block_size - (text_length % self.block_size)
        if amount_to_pad == 0:
            amount_to_pad = self.block_size
        pad = chr(amount_to_pad)
        return text + pad * amount_to_pad
    def decode(self, text):
        pad = ord(text[-1])
        return text[:-pad]

encoder = PKCS7Encoder()
unpadded_decrypted_data = encoder.decode(decrypted_data)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=09_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;Now we can attempt parsing the plist data for bytes 33+&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;decrypted_plist = readPlistFromData(unpadded_decrypted_data[32:])
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=10_snip.py&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; decrypted_plist
{
    &quot;$archiver&quot; = NSKeyedArchiver;
    &quot;$objects&quot; =     (
        &quot;$null&quot;,
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;Success!!&lt;/strong&gt;&lt;/p&gt;

&lt;p&gt;What do we have this time? Let‚Äôs try to decode it. But since we decrypted with python, our data is a string - need to wrap it into an NSData object first.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from Foundation import *

nsdata_decrypted_plist = NSData.dataWithBytes_length_(unpadded_decrypted_data[32:], len(unpadded_decrypted_data[32:]))
real_sig_decoded = NSKeyedUnarchiver.unarchiveObjectWithData_(nsdata_decrypted_plist)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=11_snip.py&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;Traceback (most recent call last):
  File &quot;&amp;lt;stdin&amp;gt;&quot;, line 1, in &amp;lt;module&amp;gt;
objc.error: NSInvalidUnarchiveOperationException - *** -[NSKeyedUnarchiver decodeObjectForKey:]: cannot decode object of class (PVSignaturePayload)
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Progress - now we‚Äôre working with a ‚ÄúPVSignaturePayload‚Äù.&lt;/p&gt;

&lt;p&gt;Again, let‚Äôs look at what data we have, and then compare that against the contents of ‚ÄúPVSignaturePayload.h‚Äù from our earlier class-dump run:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; decrypted_plist['$objects'][1]
{
    &quot;$class&quot; = &quot;&amp;lt;CFKeyedArchiverUID 0x7fba02522bd0 [0x7fff7951bed0]&amp;gt;{value = 7}&quot;;
    baselineHeight = &quot;0.1176470592617989&quot;;
    creationDate = &quot;&amp;lt;CFKeyedArchiverUID 0x7fba025203d0 [0x7fff7951bed0]&amp;gt;{value = 4}&quot;;
    lastUsedDate = &quot;&amp;lt;CFKeyedArchiverUID 0x7fba025203f0 [0x7fff7951bed0]&amp;gt;{value = 6}&quot;;
    path = &quot;&amp;lt;CFKeyedArchiverUID 0x7fba02520350 [0x7fff7951bed0]&amp;gt;{value = 2}&quot;;
}
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;vs.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;@interface PVSignaturePayload : NSObject &amp;lt;NSCoding&amp;gt;
{
    NSBezierPath *path;
    double baselineHeight;
    NSDate *creationDate;
    NSDate *lastUsedDate;
}
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=12_snip.m&quot;&gt; &lt;/script&gt;

&lt;p&gt;Oh goodness - &lt;em&gt;NSBezierPath??&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;We are &lt;strong&gt;SOOOO&lt;/strong&gt; close.&lt;/p&gt;

&lt;p&gt;That‚Äôs vector information, very likely our actual signature!&lt;/p&gt;

&lt;p&gt;We could look back at the code in &lt;strong&gt;Preview.app&lt;/strong&gt; for PVSignaturePayload - but we appear to have a match for a match on everything, &lt;em&gt;let‚Äôs just wing it!&lt;/em&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from Foundation import *
# This one isn&amp;#39;t defined in Foundation
from AppKit import NSBezierPath

class PVSignaturePayload(NSObject):
    path = None
    baselineHeight = None
    creationDate   = None
    lastUsedDate   = None
    def init(self):
        self = super(PVSignaturePayload, self).init()
        if self == None: return None
        self.path = None
        self.baselineHeight = None
        self.creationDate   = None
        self.lastUsedDate   = None
        return self
    def initWithCoder_(self, coder):
        # use decodeObjectForKey when the key value could be something other than a primitive data type (looks like NSData here...)
        self._undecryptedData = coder.decodeObjectForKey_(u&amp;quot;data&amp;quot;)
        # use decodeIntForKey because it&amp;#39;s pretty obvious from sig_plist[&amp;#39;$objects&amp;#39;][1]
        self._uid = coder.decodeInt32ForKey_(u&amp;quot;uid&amp;quot;)
        self._shouldPersist = 1
        # We won&amp;#39;t set the other values to 0, because in this context that&amp;#39;s actually a null pointer for them
        self.path = coder.decodeObjectForKey_(u&amp;quot;path&amp;quot;)
        self.baselineHeight = coder.decodeFloatForKey_(u&amp;quot;baselineHeight&amp;quot;)
        self.creationDate   = coder.decodeObjectForKey_(u&amp;quot;creationDate&amp;quot;)
        self.creationDate   = coder.decodeObjectForKey_(u&amp;quot;creationDate&amp;quot;)
        return self

# Define our class for itself
NSKeyedUnarchiver.setClass_forClassName_(PVSignaturePayload, &amp;quot;PVSignaturePayload&amp;quot;)
# Define some of the other classes that come out
NSKeyedUnarchiver.setClass_forClassName_(NSDate, &amp;quot;NSDate&amp;quot;)
NSKeyedUnarchiver.setClass_forClassName_(NSBezierPath, &amp;quot;NSBezierPath&amp;quot;)

real_sig_decoded = NSKeyedUnarchiver.unarchiveObjectWithData_(nsdata_decrypted_plist)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=13_snip.py&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; real_sig_decoded.baselineHeight
0.11764705926179886
&amp;gt;&amp;gt;&amp;gt; real_sig_decoded.path
Path &amp;lt;0x7fba0251bb90&amp;gt;
  Bounds: {{107.10252904995613, 3.5527136788005009e-15}, {271.91783064182891, 67}}
  Control point bounds: {{106.36058807373047, -1.9758532047271729}, {274.53815460205078, 68.975853204727173}}
    204.485748 61.750000 moveto
    204.099686 58.862499 201.597519 49.750000 198.925385 41.500000 curveto
    196.253250 33.250000 193.444489 24.025000 192.683685 21.000000 curveto
[...]
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;&lt;strong&gt;YAY!&lt;/strong&gt; We‚Äôve got our vector information!&lt;/p&gt;

&lt;p&gt;Now, to verify this is what it is, let‚Äôs kick it out to an image file.&lt;/p&gt;

&lt;p&gt;But &lt;a href=&quot;https://developer.apple.com/library/mac/documentation/Cocoa/Reference/ApplicationKit/Classes/NSBezierPath_Class/index.html&quot;&gt;NSBezierPath&lt;/a&gt; doesn‚Äôt have to start at a (0,0) coordinate origin. In fact, the ‚ÄúBounds‚Äù values above indicate it‚Äôs offset. So let‚Äôs make a transform and shift it back to something more reasonable before we draw it.&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;from Foundation import *
from AppKit import *
import math

sig_path = real_sig_decoded.path
shift_path = NSAffineTransform.alloc().init()
origin = sig_path.bounds().origin
# We translate by the opposite X and Y values - with +0.1 to nudge it into the positive
shift_path.translateXBy_yBy_(origin.x * -1. + 0.1, origin.y * -1. + 0.1)
sig_path_shifted = sig_path.copy()
sig_path_shifted.transformUsingAffineTransform_(shift_path)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=14_snip.py&quot;&gt; &lt;/script&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&amp;gt;&amp;gt;&amp;gt; sig_path_shifted
Path &amp;lt;0x7fba04ef0000&amp;gt;
  Bounds: {{0.10000000000000142, 0.10000000000000001}, {271.91783064182891, 67}}
  Control point bounds: {{-0.64194097622566915, -1.8758532047271763}, {274.53815460205078, 68.975853204727173}}
    97.483219 61.850000 moveto
    97.097157 58.962499 94.594990 49.850000 91.922855 41.600000 curveto
    89.250721 33.350000 86.441959 24.125000 85.681156 21.100000 curveto
&lt;/code&gt;&lt;/pre&gt;
&lt;/div&gt;

&lt;p&gt;Much better. Now we‚Äôre just inside (0,0).&lt;/p&gt;

&lt;p&gt;Now to build an image and draw the path onto it.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;(I‚Äôm gonna race through this a bit here because we‚Äôre so close to the end!)&lt;/em&gt;&lt;/p&gt;

&lt;noscript&gt;&lt;pre&gt;import os.path

bounds = sig_path_shifted.bounds()
width = int(math.ceil(bounds.origin.x + bounds.size.width))
height = int(math.ceil(bounds.origin.y + bounds.size.height))

# Build a pixels bitmap to draw onto
signature_bitmap = NSBitmapImageRep.alloc().initWithBitmapDataPlanes_pixelsWide_pixelsHigh_bitsPerSample_samplesPerPixel_hasAlpha_isPlanar_colorSpaceName_bytesPerRow_bitsPerPixel_(None, width, height, 8, 4, True, False, NSDeviceRGBColorSpace, 0, 0)

# Save our current graphic information (we really don&amp;#39;t care, but it&amp;#39;s polite)
NSGraphicsContext.saveGraphicsState()
# Set the focus to our bitmap
NSGraphicsContext.setCurrentContext_(NSGraphicsContext.graphicsContextWithBitmapImageRep_(signature_bitmap))
# Set the color to black
NSColor.blackColor().setFill()
# Fill our signature on the bitmap with black
sig_path_shifted.fill()
# Restore our previous graphics state
NSGraphicsContext.restoreGraphicsState()

# Build a data stream of a PNG from our bitmap
data = signature_bitmap.representationUsingType_properties_(NSPNGFileType, None)
# Save it to a file
result = data.writeToFile_atomically_(os.path.expanduser(&amp;quot;~/Desktop/my_signature.png&amp;quot;), True)
&lt;/pre&gt;&lt;/noscript&gt;
&lt;script src=&quot;https://gist.github.com/pudquick/785a464ab1b0fffe5fa7.js?file=15_snip.py&quot;&gt; &lt;/script&gt;

&lt;p&gt;##veni, vidi, vici!&lt;/p&gt;

&lt;p&gt;&lt;img src=&quot;/images/2015-07-26-exploring-os-x-preview-signatures/winnar_is_you.png&quot; alt=&quot;&quot; /&gt;&lt;/p&gt;

&lt;p&gt;##final notes&lt;/p&gt;

&lt;p&gt;This entire post was about signatures in 10.9.&lt;/p&gt;

&lt;p&gt;Signatures in 10.10+ have taken a new turn.&lt;/p&gt;

&lt;p&gt;Now the com.apple.Preview.signatures preference domain appears to be legacy: when you upgrade 10.9 to 10.10, OS X appears to perform a one-time conversion of your signatures into the new format. &lt;em&gt;(Speculation on my part - calling &lt;a href=&quot;http://twitter.com/rtrouton/&quot;&gt;Rich&lt;/a&gt;, master of OS X VMs, to verify ‚Ä¶)&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;In 10.10+, signatures appear to be stored entirely in the keychain - but not your login.keychain.&lt;/p&gt;

&lt;p&gt;Now every signature gets a ‚ÄúSignature Annotation Privacy‚Äù item in your ‚ÄúLocal Items‚Äù keychain (which may be named ‚ÄúiCloud Keychain‚Äù, if you‚Äôve enabled that function with your iCloud account).&lt;/p&gt;

&lt;p&gt;Instead of an encryption key stored in the password value, &lt;em&gt;an entire binary plist appears to be there.&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;Additionally, the note has changed:&lt;/p&gt;

&lt;p&gt;&lt;em&gt;‚ÄúSignatures for AnnotationKit (shared by e.g. Sketch &amp;amp; Preview). Deletion will remove all signatures from the list.‚Äù&lt;/em&gt;&lt;/p&gt;

&lt;p&gt;I‚Äôve done some initial investigations into this binary plist value and as expected, the contents are not like they used to be.&lt;/p&gt;

&lt;p&gt;I‚Äôll continue looking into it (and maybe write about what I find at some point ‚Ä¶)&lt;/p&gt;

&lt;p&gt;&lt;em&gt;- mike&lt;/em&gt;&lt;/p&gt;
</description>
        <pubDate>Sun, 26 Jul 2015 21:00:00 -0700</pubDate>
        <link>http://michaellynn.github.io/2015/07/26/exploring-os-x-preview-signatures/</link>
        <guid isPermaLink="true">http://michaellynn.github.io/2015/07/26/exploring-os-x-preview-signatures/</guid>
      </item>
    
      <item>
        <title>A Home for my Long-form Rambling</title>
        <description>&lt;p&gt;For quite some time, my friends have been &lt;a href=&quot;https://twitter.com/tvsutton/status/565118553809235968&quot;&gt;nagging
me&lt;/a&gt; &lt;a href=&quot;https://twitter.com/Vaughn_E_Miller/status/603232042772516866&quot;&gt;to put
together&lt;/a&gt; &lt;a href=&quot;https://twitter.com/foigus/status/608800195707564032&quot;&gt;a
blog&lt;/a&gt;.&lt;/p&gt;

&lt;p&gt;Blame this site on them.&lt;/p&gt;

&lt;p&gt;I‚Äôve been sharing code and tips in random &lt;a href=&quot;https://gist.github.com/pudquick&quot;&gt;Github
gists&lt;/a&gt; for several years via
&lt;a href=&quot;https://twitter.com/mikeymikey&quot;&gt;tweets&lt;/a&gt; and online chats.&lt;/p&gt;

&lt;p&gt;I‚Äôll probably keep doing that.&lt;/p&gt;

&lt;p&gt;But now if it‚Äôs interesting enough to write about but I can‚Äôt fit it into 140
characters, it‚Äôll probably end up here.&lt;/p&gt;

&lt;p&gt;And if it doesn‚Äôt - now I have no excuse to avoid blogging about it when you nag
me.&lt;/p&gt;

&lt;p&gt;Happy now?&lt;/p&gt;
</description>
        <pubDate>Sun, 19 Jul 2015 23:44:00 -0700</pubDate>
        <link>http://michaellynn.github.io/2015/07/19/your-fault/</link>
        <guid isPermaLink="true">http://michaellynn.github.io/2015/07/19/your-fault/</guid>
      </item>
    
  </channel>
</rss>
